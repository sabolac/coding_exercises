#!/usr/bin/env python3

"""
Ref: https://leetcode.com/problems/two-sum/

Given an array of integers nums and an integer target, return indices of the two
numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not
use the same element twice.

You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]


Constraints:

2 <= nums.length <= 10^4
-10^9 <= nums[i] <= 10^9
-10^9 <= target <= 10^9
Only one valid answer exists.


Follow-up: Can you come up with an algorithm that is less than O(n^2) time
complexity?
"""


from typing import List
import random


def two_sum(nums: List[int], target: int) -> List[int]:
    len_nums = len(nums)
    for i, v1 in enumerate(nums):
        v2 = target - v1
        for j in range(i+1, len_nums):
            if nums[j] == v2:
                return [i, j]


def generate_test_case(list_size=100):
    max_val = list_size**2

    # use set to eliminate duplicate values
    random_list = list(set(random.choices(range(max_val), k=list_size)))
    # adjust for duplicates if any during random generation
    list_size = len(random_list)

    # pick two random positions in the list
    i, j = 0, 0
    while i == j or i > j:
        i, j = random.randrange(list_size), random.randrange(list_size)

    # set to larger than any other item in the list so i, j is guaranteed result
    random_list[i] = max_val + 1000
    random_list[j] = max_val + 2000

    return random_list, i, j


assert two_sum([1, 2, 3, 4, 5], 6) == [0, 4]

for _ in range(50):
    l, i, j = generate_test_case(100)
    assert two_sum(l, l[i]+l[j]) == [i, j]
