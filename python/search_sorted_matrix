#!/usr/bin/env python3

"""
You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order. The first integer of each row is
greater than the last integer of the previous row. Given an integer target,
return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.


Example 1:

Input:
matrix = [
    [ 1,  3,  5,  7],
    [10, 11, 16, 20],
    [23, 30, 34, 60]]
target = 3
Output: true


Example 2:

Input:
matrix = [
    [ 1,  3,  5,  7],
    [10, 11, 16, 20],
    [23, 30, 34, 60]]
target = 13
Output: false


Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-10^4 <= matrix[i][j], target <= 10^4
"""


from typing import List


class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        return self.search_matrix(matrix, target) != -1

    def search_matrix(self, matrix: List[List[int]], target: int) -> (int, int):
        """
        We think the 2D matrix as a long 1D sorted list by mapping a given index
        in the range [0, rows*columns) to the [i][j] to index the 2D matrix to
        retrieve the value for that index. The rest is regular binary search
        """
        rows = len(matrix)
        columns = len(matrix[0])
        l = 0
        r = rows*columns - 1
        while l <= r:
            mid = l + (r-l)//2

            # map mid to i,j to retrieve matrix[i][j]
            i = mid // columns
            j = mid % columns
            item = matrix[i][j]

            if item < target:
                l = mid+1
            elif item > target:
                r = mid-1
            else:
                # found
                return i, j

        # not found
        return -1


def main():
    rows = 4
    columns = 5
    matrix = [
        [j*10 + i*10*columns for j in range(columns)] for i in range(rows)]

    for i in range(rows):
        for j in range(columns):
            assert Solution().search_matrix(matrix, j*10 + i*10*columns) == (i, j)
            assert Solution().search_matrix(matrix, j*10 + i*10*columns - 1) == -1
            assert Solution().search_matrix(matrix, j*10 + i*10*columns + 1) == -1

            assert Solution().searchMatrix(matrix, j*10 + i*10*columns)
            assert not Solution().searchMatrix(matrix, j*10 + i*10*columns - 1)
            assert not Solution().searchMatrix(matrix, j*10 + i*10*columns + 1)


main()
