#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/search-in-rotated-sorted-array/

There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown
pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k],
nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For
example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become
[4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return
the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4


Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1


Example 3:

Input: nums = [1], target = 0
Output: -1


Constraints:

1 <= nums.length <= 5000
-10^4 <= nums[i] <= 10^4
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-10^4 <= target <= 10^4
"""

from enum import Enum
from typing import List


class Solution:

    class Search(Enum):
        LEFT = 1
        RIGHT = 2
        FOUND = 3

    def search(self, nums: List[int], target: int) -> int:
        l = 0
        r = len(nums)-1

        while l <= r:
            m = l+(r-l)//2
            if nums[m] == target:
                return m

            if nums[m] >= nums[l]:
                if nums[m] > target >= nums[l]:
                    r = m - 1
                else:
                    l = m + 1
            else:
                # nums[m] < nums[l]:
                if nums[r] >= target > nums[m]:
                    l = m + 1
                else:
                    r = m - 1
        return -1

    def search_slower(self, nums: List[int], target: int) -> int:
        left = 0
        right = len(nums) - 1

        while left <= right:
            mid = left + (right-left)//2
            # print(f"search({target=} in {nums[left:right+1]} {mid=})")
            match self._go_which_way(nums, target, left, right, mid):
                case Solution.Search.LEFT:
                    # search left subtree
                    right = mid - 1
                case Solution.Search.RIGHT:
                    # search right subtree
                    left = mid + 1
                case Solution.Search.FOUND:
                    return mid

        return -1

    def _go_which_way(self, nums: List[int], target: int, left: int, right: int, mid: int) -> Search:
        mid_value = nums[mid]

        if target == mid_value:
            return Solution.Search.FOUND

        # check if the subtree we are searching contains the rotation point
        # (called cracked)
        left_value = nums[left]
        right_value = nums[right]
        cracked = left_value > right_value

        if cracked:
            if mid_value >= left_value:
                if mid_value > target >= left_value:
                    return Solution.Search.LEFT
                return Solution.Search.RIGHT
            else:
                if right_value >= target > mid_value:
                    return Solution.Search.RIGHT
                return Solution.Search.LEFT
        else:
            if target < mid_value:
                return Solution.Search.LEFT

            if target > mid_value:
                return Solution.Search.RIGHT

        return Solution.Search.FOUND


def main():
    assert Solution().search([5, 1, 3], 5) == 0
    assert Solution().search([5, 1, 3], 1) == 1
    assert Solution().search([5, 1, 3], 3) == 2
    assert Solution().search([3, 1], 1) == 1
    assert Solution().search([3, 1], 3) == 0
    assert Solution().search([3, 1], 4) == -1
    assert Solution().search([3, 1], 0) == -1
    assert Solution().search([3], 3) == 0
    assert Solution().search([3], 4) == -1
    assert Solution().search([3], 2) == -1

    assert Solution().search([4, 5, 6, 7, 0, 1, 2], 7) == 3

    assert Solution().search([4, 5, 6, 7, 0, 1, 2], 4) == 0
    assert Solution().search([4, 5, 6, 7, 0, 1, 2], 5) == 1
    assert Solution().search([4, 5, 6, 7, 0, 1, 2], 6) == 2
    assert Solution().search([4, 5, 6, 7, 0, 1, 2], 7) == 3
    assert Solution().search([4, 5, 6, 7, 0, 1, 2], 0) == 4
    assert Solution().search([4, 5, 6, 7, 0, 1, 2], 1) == 5
    assert Solution().search([4, 5, 6, 7, 0, 1, 2], 2) == 6

    assert Solution().search([4, 5, 6, 7, 0, 1, 2, 3], 4) == 0
    assert Solution().search([4, 5, 6, 7, 0, 1, 2, 3], 5) == 1
    assert Solution().search([4, 5, 6, 7, 0, 1, 2, 3], 6) == 2
    assert Solution().search([4, 5, 6, 7, 0, 1, 2, 3], 7) == 3
    assert Solution().search([4, 5, 6, 7, 0, 1, 2, 3], 0) == 4
    assert Solution().search([4, 5, 6, 7, 0, 1, 2, 3], 1) == 5
    assert Solution().search([4, 5, 6, 7, 0, 1, 2, 3], 2) == 6
    assert Solution().search([4, 5, 6, 7, 0, 1, 2, 3], 3) == 7

    assert Solution().search([4, 5, 6, 7, 0, 1, 2], 3) == -1
    assert Solution().search([4, 5, 6, 7, 0, 1, 2], 9) == -1

    assert Solution().search([40, 50, 60, 70, 0, 10, 20], -1) == -1
    assert Solution().search([40, 50, 60, 70, 0, 10, 20], 5) == -1
    assert Solution().search([40, 50, 60, 70, 0, 10, 20], 15) == -1
    assert Solution().search([40, 50, 60, 70, 0, 10, 20], 25) == -1
    assert Solution().search([40, 50, 60, 70, 0, 10, 20], 35) == -1
    assert Solution().search([40, 50, 60, 70, 0, 10, 20], 45) == -1
    assert Solution().search([40, 50, 60, 70, 0, 10, 20], 55) == -1
    assert Solution().search([40, 50, 60, 70, 0, 10, 20], 65) == -1
    assert Solution().search([40, 50, 60, 70, 0, 10, 20], 75) == -1


main()
