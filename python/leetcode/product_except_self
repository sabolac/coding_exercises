#!/usr/bin/env python3


"""
Ref:https://leetcode.com/problems/product-of-array-except-self

Given an integer array nums, return an array answer such that answer[i] is equal
to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit
integer.

You must write an algorithm that runs in O(n) time and without using the
division operation.



Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]


Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]


Constraints:

2 <= nums.length <= 10^5
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit
integer.
"""


from typing import List


class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        suffix_product = prefix_product = 1
        result = [1]*len(nums)
        for i in range(len(nums)):
            # going forward, set each element in result to the product of all
            # the elements before itself (and not including itself)
            result[i] *= prefix_product
            prefix_product *= nums[i]

            # going backward, set each element in result to the product of all
            # the elements after itself (and not including itself)
            result[-i-1] *= suffix_product
            suffix_product *= nums[-i-1]
        return result


def main():
    assert Solution().productExceptSelf([1, 2, 3, 4]) == [24, 12, 8, 6]
    assert Solution().productExceptSelf(
        [1, 2, 3, 4, 5]) == [120, 60, 40, 30, 24]
    assert Solution().productExceptSelf([-1, 1, 0, -3, 3]) == [0, 0, 9, 0, 0]


main()
