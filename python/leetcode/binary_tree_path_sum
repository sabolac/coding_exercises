#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/path-sum

Path Sum

Given the root of a binary tree and an integer targetSum, return true if the
tree has a root-to-leaf path such that adding up all the values along the path
equals targetSum.

A leaf is a node with no children.


Example 1:

Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.


Example 2:

Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.

Example 3:

Input: root = [], targetSum = 0
Output: false
Explanation: Since the tree is empty, there are no root-to-leaf paths.

Constraints:
The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000
"""


from typing import Self
from collections import deque


# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val: int = 0, left: Self = None, right: Self = None, next: Self = None):
        self.val = val
        self.left = left
        self.right = right

    @staticmethod
    def from_list(l: list[int]) -> Self | None:
        if not l:
            return None

        root = TreeNode(l[0])
        q = deque()
        q.append(root)

        i = 0
        while i < len(l)-2:
            n = q.popleft()

            i += 1
            if l[i] is not None:
                n.left = TreeNode(l[i])
                q.append(n.left)

            i += 1
            if l[i] is not None:
                n.right = TreeNode(l[i])
                q.append(n.right)

        return root

    @staticmethod
    def to_list(root: Self | None) -> list[int]:
        if not root:
            return []

        l = []
        q = deque()
        q.append(root)

        while q:
            n = q.popleft()
            if n:
                l.append(n.val)
                q.append(n.left)
                q.append(n.right)
            else:
                l.append(None)

        # clean up the empty (None) nodes at the tail of last level
        i = len(l)-1
        while i >= 0 and l[i] is None:
            i -= 1

        return l[:i+1] if i >= 0 else []


class Solution:
    def hasPathSum(self, root: TreeNode | None, targetSum: int) -> bool:
        if not root:
            return False

        q = deque([(root, targetSum)])
        while q:
            c, target = q.pop()
            remainder = target - c.val
            if not c.left and not c.right:
                if remainder == 0:
                    return True
            else:
                if c.left:
                    q.append((c.left, remainder))
                if c.right:
                    q.append((c.right, remainder))

        return False


def main():
    root = TreeNode.from_list([1, None, 2])
    assert not Solution().hasPathSum(root, 1)

    root = TreeNode.from_list([1, 2, 3])
    assert not Solution().hasPathSum(root, 5)

    root = TreeNode.from_list([])
    assert not Solution().hasPathSum(root, 0)

    root = TreeNode.from_list(
        [5, 4, 8, 11, None, 13, 4, 7, 2, None, None, None, 1])
    assert Solution().hasPathSum(root, 22)


main()
