#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/insert-interval

Insert Interval

You are given an array of non-overlapping intervals where intervals[i] =
[starti, endi] represent the start and the end of the ith interval and intervals
is sorted in ascending order by starti. You are also given an interval
newInterval = [start, end] that represents the start and end of another
interval.

Insert newInterval into intervals such that intervals is still sorted in
ascending order by starti and intervals still does not have any overlapping
intervals (merge overlapping intervals if necessary).

Return intervals after the insertion.


Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]


Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].


Constraints:

0 <= intervals.length <= 10^4
intervals[i].length == 2
0 <= starti <= endi <= 10^5
intervals is sorted by starti in ascending order.
newInterval.length == 2
0 <= start <= end <= 10^5
"""


from typing import List
from bisect import bisect_left


class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        n = len(intervals)
        l = newInterval[0]
        r = newInterval[1]

        i = bisect_left(intervals, l, key=lambda x: x[1])
        if i == n:
            intervals.append(newInterval)
            return intervals

        v = intervals[i]
        if l >= v[0]:
            l = v[0]

        j = bisect_left(intervals, r, lo=i, key=lambda x: x[1])
        if j == n:
            return intervals[:i] + [[l, r]]

        v = intervals[j]
        if r >= v[0]:
            r = v[1]
        else:
            j -= 1

        return intervals[:i] + [[l, r]] + intervals[j+1:]


def main():
    intervals = [[1, 3], [6, 9]]
    newInterval = [2, 5]
    output = [[1, 5], [6, 9]]
    result = Solution().insert(intervals, newInterval)
    assert result == output

    intervals = [[1, 2], [3, 5], [6, 7], [8, 10], [12, 16]]
    newInterval = [4, 8]
    output = [[1, 2], [3, 10], [12, 16]]
    result = Solution().insert(intervals, newInterval)
    assert result == output


main()
