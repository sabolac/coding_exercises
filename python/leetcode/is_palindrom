#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/valid-palindrome

A phrase is a palindrome if, after converting all uppercase letters into
lowercase letters and removing all non-alphanumeric characters, it reads the
same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.



Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.


Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.


Example 3:

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.


Constraints:

1 <= s.length <= 2 * 10^5
s consists only of printable ASCII characters.
"""


import string


class Solution:
    def isPalindrome(self, s: str) -> bool:
        alpha_numeric = string.ascii_letters + string.digits
        N = len(s)
        l = 0
        r = N - 1

        while l < r:
            while l < N and s[l] not in alpha_numeric:
                l += 1
            while r > 0 and s[r] not in alpha_numeric:
                r -= 1
            if l < r and s[l].lower() != s[r].lower():
                return False
            l += 1
            r -= 1

        return True


def main():
    assert Solution().isPalindrome("A man, a plan, a canal: Panama")
    assert Solution().isPalindrome(" ")
    assert Solution().isPalindrome("   ")
    assert Solution().isPalindrome("   123 3 2 1")
    assert not Solution().isPalindrome("race a car")


main()
