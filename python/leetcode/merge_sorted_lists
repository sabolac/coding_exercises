#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/merge-two-sorted-lists

Merge Two Sorted Lists

You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists into one sorted list. The list should be made by splicing
together the nodes of the first two lists.

Return the head of the merged linked list.


Example 1:

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]


Example 2:

Input: list1 = [], list2 = []
Output: []


Example 3:

Input: list1 = [], list2 = [0]
Output: [0]


Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.
"""

from typing import Optional


class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


class Solution:
    def mergeTwoLists(self, list1: ListNode | None, list2: ListNode | None) -> ListNode | None:
        if not list1:
            return list2
        if not list2:
            return list1

        i = list1
        j = list2
        if i.val < j.val:
            i, j = j, i
        result = j

        while j:
            if j.val <= i.val:
                pj = j
                j = j.next
            else:
                pj.next = i
                i, j = j, i
        pj.next = i
        return result


def to_list(n):
    l = []
    while n:
        l.append(n.val)
        n = n.next

    return l


def from_list(l: list[int]) -> ListNode | None:
    head = ListNode()
    n = head
    for i in l:
        n.next = ListNode(i)
        n = n.next
    head = head.next
    return head


def main():
    list1 = from_list([1, 2, 4])
    list2 = from_list([1, 3, 4])
    output = [1, 1, 2, 3, 4, 4]
    assert to_list(Solution().mergeTwoLists(list1, list2)) == output

    list1 = from_list([1, 2, 4, 5, 10])
    list2 = from_list([1, 3, 4])
    output = [1, 1, 2, 3, 4, 4, 5, 10]
    assert to_list(Solution().mergeTwoLists(list1, list2)) == output


main()
