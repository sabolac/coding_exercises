#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/minimum-size-subarray-sum

Minimum Size Subarray Sum

Given an array of positive integers nums and a positive integer target, return
the minimal length of a subarray whose sum is greater than or equal to target.
If there is no such subarray, return 0 instead.



Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem
constraint.


Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1


Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0


Constraints:

1 <= target <= 10^9
1 <= nums.length <= 10^5
1 <= nums[i] <= 10^4

Follow up: If you have figured out the O(n) solution, try coding another
solution of which the time complexity is O(nlogn).
"""


from typing import List


class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        N = len(nums)
        l = r = subarray_length = current_sum = 0

        # find the initial run of subarray from the start that adds up to target
        while r < N and current_sum < target:
            current_sum += nums[r]
            r += 1
        if current_sum >= target:
            subarray_length = r - l

        # remove as many elements from the left to keep the sum above target and
        # move the right end of the subarray towards the end adding one more
        # element at each step
        while True:
            while l < r and (current_sum - nums[l] >= target):
                current_sum -= nums[l]
                l += 1
            subarray_length = min(subarray_length, r-l)

            if r < N:
                current_sum += nums[r]
                r += 1
            else:
                break

        return subarray_length

    def minSubArrayLen2(self, target: int, nums: List[int]) -> int:
        N = len(nums)
        subarray_length = N+1
        current_sum = l = r = 0

        while r < N:
            current_sum += nums[r]
            while current_sum >= target:
                subarray_length = min(subarray_length, r-l+1)
                current_sum -= nums[l]
                l += 1
            r += 1

        return subarray_length if subarray_length <= N else 0


def main():
    assert Solution().minSubArrayLen(4, []) == 0
    assert Solution().minSubArrayLen(4, [1, 1]) == 0
    assert Solution().minSubArrayLen(4, [1, 1, 1]) == 0
    assert Solution().minSubArrayLen(4, [1, 1, 4]) == 1
    assert Solution().minSubArrayLen(4, [1, 1, 1, 1]) == 4
    assert Solution().minSubArrayLen(4, [1, 2, 1, 1]) == 3
    assert Solution().minSubArrayLen(4, [1, 2, 1, 2]) == 3
    assert Solution().minSubArrayLen(4, [1, 2, 1, 3]) == 2
    assert Solution().minSubArrayLen(7, [2, 3, 1, 2, 4, 3]) == 2
    assert Solution().minSubArrayLen(4, [1, 4, 4]) == 1
    assert Solution().minSubArrayLen(11, [1, 1, 1, 1, 1, 1, 1, 1]) == 0


main()
