#!/usr/bin/env python3

"""
Ref: https://leetcode.com/problems/clone-graph

Clone Graph

Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a value (int) and a list (List[Node]) of its
neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}


Test case format:

For simplicity, each node's value is the same as the node's index (1-indexed).
For example, the first node with val == 1, the second node with val == 2, and so
on. The graph is represented in the test case using an adjacency list.

An adjacency list is a collection of unordered lists used to represent a finite
graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with val = 1. You must return the
copy of the given node as a reference to the cloned graph.


Example 1:

Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: There are 4 nodes in the graph.
1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).
3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).
4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).


Example 2:

Input: adjList = [[]]
Output: [[]]
Explanation: Note that the input contains one empty list. The graph consists of
only one node with val = 1 and it does not have any neighbors.

Example 3:

Input: adjList = []
Output: []
Explanation: This an empty graph, it does not have any nodes.


Constraints:

The number of nodes in the graph is in the range [0, 100].
1 <= Node.val <= 100
Node.val is unique for each node.
There are no repeated edges and no self-loops in the graph.
The Graph is connected and all nodes can be visited starting from the given
node.
"""


from typing import Self


class Node:
    def __init__(self, val=0, neighbors=None):
        self.val = val
        self.neighbors = neighbors if neighbors else []

    @staticmethod
    def from_list(adj_list: list[list[int]]) -> Self | None:
        if not adj_list:
            return None

        nodes = [Node(i) for i in range(1, len(adj_list)+1)]
        for n, neighbors in zip(nodes, adj_list):
            n.neighbors = [nodes[i-1] for i in neighbors]
        return nodes[0]

    def to_adj_list(self) -> list[list[int]]:
        d = {}
        stack = [self]
        while stack:
            n = stack.pop()
            neighbors = [h.val for h in n.neighbors]
            neighbors.sort()
            d[n.val] = neighbors
            stack.extend([h for h in n.neighbors if h.val not in d])
        result = []
        for i in range(1, len(d)+1):
            result.append(d[i])
        return result


class Solution:
    def cloneGraph(self, node: Node | None) -> Node | None:
        if not node:
            return None

        d = {}
        stack = [node]
        while stack:
            n = stack.pop()
            neighbors = [h.val for h in n.neighbors]
            neighbors.sort()
            d[n.val] = neighbors
            stack.extend([h for h in n.neighbors if h.val not in d])

        nodes = [Node(i) for i in range(1, len(d)+1)]
        for i, neighbors in d.items():
            nodes[i-1].neighbors = [nodes[j-1] for j in neighbors]

        return nodes[0]


def main():
    n = Node.from_list([[2, 4], [1, 3], [2, 4], [1, 3]])
    output = [[2, 4], [1, 3], [2, 4], [1, 3]]
    assert Solution().cloneGraph(n).to_adj_list() == output

    n = Node.from_list([[]])
    output = [[]]
    assert Solution().cloneGraph(n).to_adj_list() == output

    n = Node.from_list([])
    assert Solution().cloneGraph(n) is None


main()
