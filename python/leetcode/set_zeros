#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/set-matrix-zeroes

Set Matrix Zeroes

Given an m x n integer matrix matrix, if an element is 0, set its entire row and
column to 0's.

You must do it in place.


Example 1:

Input: matrix = [
    [1,1,1],
    [1,0,1],
    [1,1,1],
]
Output: [
    [1,0,1],
    [0,0,0],
    [1,0,1]
]


Example 2:

Input: matrix = [
    [0,1,2,0],
    [3,4,5,2],
    [1,3,1,5],
]
Output: [
    [0,0,0,0],
    [0,4,5,0],
    [0,3,1,0]
]


Constraints:

m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-2^31 <= matrix[i][j] <= 2^31 - 1


Follow up:

A straightforward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?
"""


from typing import List


class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        Using constant extra space
        """
        m = len(matrix)
        n = len(matrix[0])

        first_row_zero = False
        first_col_zero = False

        for i, row in enumerate(matrix):
            for j, v in enumerate(row):
                if v == 0:
                    if i == 0:
                        first_row_zero = True
                    if j == 0:
                        first_col_zero = True
                    matrix[i][0] = matrix[0][j] = 0

        # fill 0's skipping first row and column
        for i in range(1, m):
            for j in range(1, n):
                if matrix[i][0] == 0 or matrix[0][j] == 0:
                    matrix[i][j] = 0

        # handle first row
        if first_row_zero:
            for j in range(n):
                matrix[0][j] = 0

        # handle first column
        if first_col_zero:
            for i in range(m):
                matrix[i][0] = 0

    def setZeroes1(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        O(n) space
        """
        columns = set()
        # zero out the rows noting which columns we hit 0 for along the way
        for i, row in enumerate(matrix):
            saw_0_before = False
            for j, v in enumerate(row):
                if v == 0:
                    columns.add(j)
                    # fill the row backwards if not saw a 0 before
                    if not saw_0_before:
                        for k in range(j):
                            matrix[i][k] = 0
                    saw_0_before = True
                elif saw_0_before:
                    matrix[i][j] = 0

        # zero out the columns for which we have seen a zero for
        for row in matrix:
            for j in columns:
                row[j] = 0


def compare_matrix(m1: List[List[int]], m2: List[List[int]]) -> bool:
    if len(m1) != len(m2):
        return False

    for r1, r2 in zip(m1, m2):
        if r1 != r2:
            return False

    return True


def main():

    matrix = [
        [1, 1, 1],
        [1, 0, 1],
        [1, 1, 1],
    ]
    output = [
        [1, 0, 1],
        [0, 0, 0],
        [1, 0, 1],
    ]
    Solution().setZeroes(matrix)
    assert compare_matrix(matrix, output)

    matrix = [
        [0, 1, 2, 0],
        [3, 4, 5, 2],
        [1, 3, 1, 5],
    ]
    output = [
        [0, 0, 0, 0],
        [0, 4, 5, 0],
        [0, 3, 1, 0],
    ]
    Solution().setZeroes(matrix)
    assert compare_matrix(matrix, output)


main()
