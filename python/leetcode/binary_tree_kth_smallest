#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/kth-smallest-element-in-a-bst

Kth Smallest Element in a BST

Given the root of a binary search tree, and an integer k, return the kth
smallest value (1-indexed) of all the values of the nodes in the tree.


Example 1:

Input: root = [3,1,4,null,2], k = 1
Output: 1


Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3


Constraints:

The number of nodes in the tree is n.
1 <= k <= n <= 10^4
0 <= Node.val <= 10^4


Follow up: If the BST is modified often (i.e., we can do insert and delete
operations) and you need to find the kth smallest frequently, how would you
optimize?
"""


from typing import Self
from collections import deque


# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val: int = 0, left: Self = None, right: Self = None):
        self.val = val
        self.left = left
        self.right = right

    @staticmethod
    def from_list(l: list[int]) -> Self | None:
        if not l:
            return None

        root = TreeNode(l[0])
        q = deque()
        q.append(root)

        i = 0
        while i < len(l)-2:
            n = q.popleft()

            i += 1
            if l[i] is not None:
                n.left = TreeNode(l[i])
                q.append(n.left)

            i += 1
            if l[i] is not None:
                n.right = TreeNode(l[i])
                q.append(n.right)

        return root


class Solution:
    def kthSmallest_recursive(self, root: TreeNode | None, k: int) -> int:
        count = 0
        kth_smallest = 0

        def dfs(n):
            nonlocal count, kth_smallest
            if not n:
                return
            dfs(n.left)
            # if we have already found kth in the left subtree no need to
            # further recurse into right subtree
            if count == k:
                return
            count += 1
            if count == k:
                kth_smallest = n.val
                return
            dfs(n.right)

        dfs(root)
        return kth_smallest

    def kthSmallest(self, root: TreeNode | None, k: int) -> int:
        stack = []
        n = root
        count = 0
        while True:
            while n:
                stack.append(n)
                n = n.left
            # kth element not found, should not happen given the problem
            # constraints (1 <= k <= n)
            if not stack:
                return -1
            n = stack.pop()
            count += 1
            if count == k:
                return n.val
            n = n.right


def main():
    r = TreeNode.from_list([3, 1, 4, None, 2])
    assert Solution().kthSmallest(r, 1) == 1

    r = TreeNode.from_list([5, 3, 6, 2, 4, None, None, 1, None])
    assert Solution().kthSmallest(r, 3) == 3


main()
