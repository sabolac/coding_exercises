#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/contains-duplicate-ii

Contains Duplicate II

Given an integer array nums and an integer k, return true if there are two
distinct indices i and j in the array such that nums[i] == nums[j] and abs(i -
j) <= k.

Example 1:

Input: nums = [1,2,3,1], k = 3
Output: true


Example 2:

Input: nums = [1,0,1,1], k = 1
Output: true


Example 3:

Input: nums = [1,2,3,1,2,3], k = 2
Output: false


Constraints:

1 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
0 <= k <= 10^5
"""


from typing import List


class Solution:
    def containsNearbyDuplicate_brute_force(self, nums: List[int], k: int) -> bool:
        n = len(nums)
        for i in range(n):
            for j in range(i+1, min(i+k+1, n)):
                if nums[i] == nums[j]:
                    return True

        return False

    def containsNearbyDuplicate_sort(self, nums: List[int], k: int) -> bool:
        n = len(nums)
        sorted_nums_with_index = sorted(
            [(v, i) for i, v in enumerate(nums)], key=lambda x: x[0])

        for i in range(n-1):
            v1, i1 = sorted_nums_with_index[i]
            v2, i2 = sorted_nums_with_index[i+1]

            if v1 == v2 and i2 - i1 <= k:
                return True

        return False

    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        n = len(nums)
        k = min(k, n-1)
        window = set(nums[:k])

        for i in range(k, n):
            window.add(nums[i])
            if len(window) <= k:
                return True
            window.remove(nums[i-k])

        return False


def main():
    assert Solution().containsNearbyDuplicate([1, 2, 3, 1], 3)
    assert Solution().containsNearbyDuplicate([1, 0, 1, 1], 1)
    assert not Solution().containsNearbyDuplicate([1, 2, 3, 1, 2, 3], 2)


main()
