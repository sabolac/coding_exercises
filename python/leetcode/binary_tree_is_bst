#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/validate-binary-search-tree

Validate Binary Search Tree

Given the root of a binary tree, determine if it is a valid binary search tree
(BST).

A valid BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.


Example 1:

Input: root = [2,1,3]
Output: true


Example 2:

Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.


Constraints:

The number of nodes in the tree is in the range [1, 10^4].
-2^31 <= Node.val <= 2^31 - 1
"""


from typing import Self
from collections import deque


# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val: int = 0, left: Self = None, right: Self = None):
        self.val = val
        self.left = left
        self.right = right

    @staticmethod
    def from_list(l: list[int]) -> Self | None:
        if not l:
            return None

        root = TreeNode(l[0])
        q = deque()
        q.append(root)

        i = 0
        while i < len(l)-2:
            n = q.popleft()

            i += 1
            if l[i] is not None:
                n.left = TreeNode(l[i])
                q.append(n.left)

            i += 1
            if l[i] is not None:
                n.right = TreeNode(l[i])
                q.append(n.right)

        return root

    @staticmethod
    def to_list(root: Self | None) -> list[int]:
        if not root:
            return []

        l = []
        q = deque()
        q.append(root)

        while q:
            n = q.popleft()
            if n:
                l.append(n.val)
                q.append(n.left)
                q.append(n.right)
            else:
                l.append(None)

        # clean up the empty (None) nodes at the tail of last level
        i = len(l)-1
        while i >= 0 and l[i] is None:
            i -= 1

        return l[:i+1] if i >= 0 else []


class Solution:
    """
    Do an in-order traversal using a stack and make sure next item is always
    greater than the previous
    """

    def isValidBST(self, root: TreeNode | None) -> bool:
        if not root:
            return True
        previous = float('-inf')

        stack = []
        n = root
        while True:
            while n:
                stack.append(n)
                n = n.left
            if not stack:  # done traversing all nodes in the tree
                return True
            n = stack.pop()
            if n.val <= previous:
                return False
            previous = n.val
            n = n.right


def main():
    r = TreeNode.from_list([2, 1, 3])
    assert Solution().isValidBST(r)

    r = TreeNode.from_list([5, 1, 4, None, None, 3, 6])
    assert not Solution().isValidBST(r)


main()
