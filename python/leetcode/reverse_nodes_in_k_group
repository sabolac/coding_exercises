#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/reverse-nodes-in-k-group

Reverse Nodes in k-Group

Given the head of a linked list, reverse the nodes of the list k at a time, and
return the modified list.

k is a positive integer and is less than or equal to the length of the linked
list. If the number of nodes is not a multiple of k then left-out nodes, in the
end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be
changed.



Example 1:

Input: head = [1,2,3,4,5], k = 2 Output: [2,1,4,3,5]


Example 2:

Input: head = [1,2,3,4,5], k = 3 Output: [3,2,1,4,5]


Constraints:

The number of nodes in the list is n. 1 <= k <= n <= 5000 0 <= Node.val <= 1000


Follow-up: Can you solve the problem in O(1) extra memory space?
"""


class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


def to_list(n):
    l = []
    while n:
        l.append(n.val)
        n = n.next

    return l


def from_list(l: list[int]) -> ListNode | None:
    head = ListNode()
    n = head
    for i in l:
        n.next = ListNode(i)
        n = n.next
    head = head.next
    return head


class Solution:
    def reverseKGroup(self, head: ListNode | None, k: int) -> ListNode | None:
        if not head or not head.next or k <= 1:
            return head

        p = start = ListNode(next=head)
        c = head
        while c.next:
            b = c
            c = c.next
            n = c.next
            i = 1
            while i < k:
                if not n:
                    break
                c.next = b
                b = c
                c = n
                n = n.next
                i += 1
            if i == k:
                # connect the reversed k group to previous group via p
                t = p.next
                t.next = c
                p.next = b
                p = t
            else:
                # last group had k elements, finish it
                if i == k - 1:
                    p.next.next = None
                    p.next = c
                    c.next = b
                else:
                    # last group was less than k nodes, put them in original
                    # order
                    while b != p.next:
                        n = b.next
                        b.next = c
                        c = b
                        b = n
                break

        return start.next


def main():
    head = from_list([1, 2])
    output = [2, 1]
    assert to_list(Solution().reverseKGroup(head, 2)) == output

    head = from_list([1, 2, 3, 4])
    output = [2, 1, 4, 3]
    assert to_list(Solution().reverseKGroup(head, 2)) == output

    head = from_list([1, 2, 3, 4, 5, 6])
    output = [2, 1, 4, 3, 6, 5]
    assert to_list(Solution().reverseKGroup(head, 2)) == output

    head = from_list([1, 2, 3, 4, 5, 6, 7])
    output = [2, 1, 4, 3, 6, 5, 7]
    assert to_list(Solution().reverseKGroup(head, 2)) == output

    head = from_list([1, 2, 3])
    output = [3, 2, 1]
    assert to_list(Solution().reverseKGroup(head, 3)) == output

    head = from_list([1, 2, 3, 4, 5, 6])
    output = [3, 2, 1, 6, 5, 4]
    assert to_list(Solution().reverseKGroup(head, 3)) == output

    head = from_list([1, 2, 3, 4, 5])
    output = [3, 2, 1, 4, 5]
    assert to_list(Solution().reverseKGroup(head, 3)) == output

    head = from_list([1, 2, 3])
    output = [2, 1, 3]
    assert to_list(Solution().reverseKGroup(head, 2)) == output

    head = from_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
    output = [3, 2, 1, 6, 5, 4, 9, 8, 7, 10, 11]
    assert to_list(Solution().reverseKGroup(head, 3)) == output

    head = from_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
    output = [4, 3, 2, 1, 8, 7, 6, 5, 9, 10, 11]
    assert to_list(Solution().reverseKGroup(head, 4)) == output

    head = from_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
    output = [5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 11]
    assert to_list(Solution().reverseKGroup(head, 5)) == output


main()
