#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array

Find First and Last Position of Element in Sorted Array

Given an array of integers nums sorted in non-decreasing order, find the
starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.


Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]


Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]


Example 3:

Input: nums = [], target = 0
Output: [-1,-1]


Constraints:

0 <= nums.length <= 10^5
-10^9 <= nums[i] <= 10^9
nums is a non-decreasing array.
-10^9 <= target <= 10^9
"""


class Solution:
    def searchRange(self, nums: list[int], target: int) -> list[int]:
        def search_insertion_position(target: int, l: int, r: int):
            while l <= r:
                mid = l + (r-l)//2
                if nums[mid] > target:
                    r = mid - 1
                elif nums[mid] < target:
                    l = mid + 1
                else:
                    return mid
            return l

        if not nums:
            return [-1, -1]

        i = search_insertion_position(target, 0, len(nums)-1)
        if i == len(nums) or nums[i] != target:
            return [-1, -1]

        p = search_insertion_position(target-0.5, 0, i)
        q = search_insertion_position(target+0.5, i, len(nums)-1)-1

        return [p, q]


def main():
    nums = [5, 7, 7, 8, 8, 10]
    target = 8
    assert Solution().searchRange(nums, target) == [3, 4]

    nums = [5, 7, 7, 8, 8, 10]
    target = 7
    assert Solution().searchRange(nums, target) == [1, 2]

    nums = [5, 7, 7, 8, 8, 10]
    target = 10
    assert Solution().searchRange(nums, target) == [5, 5]

    nums = [5, 7, 7, 8, 8, 10]
    target = 5
    assert Solution().searchRange(nums, target) == [0, 0]

    nums = [5, 7, 7, 8, 8, 10]
    target = 6
    assert Solution().searchRange(nums, target) == [-1, -1]

    nums = [2, 2]
    target = 3
    assert Solution().searchRange(nums, target) == [-1, -1]

    nums = []
    target = 0
    assert Solution().searchRange(nums, target) == [-1, -1]


main()
