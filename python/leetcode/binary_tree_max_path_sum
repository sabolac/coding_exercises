#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/binary-tree-maximum-path-sum

Binary Tree Maximum Path Sum

A path in a binary tree is a sequence of nodes where each pair of adjacent nodes
in the sequence has an edge connecting them. A node can only appear in the
sequence at most once. Note that the path does not need to pass through the
root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty
path.


Example 1:

Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.


Example 2:

Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 =
42.


Constraints:

The number of nodes in the tree is in the range [1, 3 * 10^4].
-1000 <= Node.val <= 1000
"""


from typing import Self
from collections import deque


# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val: int = 0, left: Self = None, right: Self = None, next: Self = None):
        self.val = val
        self.left = left
        self.right = right

    @staticmethod
    def from_list(l: list[int]) -> Self | None:
        if not l:
            return None

        root = TreeNode(l[0])
        q = deque()
        q.append(root)

        i = 0
        while i < len(l)-2:
            n = q.popleft()

            i += 1
            if l[i] is not None:
                n.left = TreeNode(l[i])
                q.append(n.left)

            i += 1
            if l[i] is not None:
                n.right = TreeNode(l[i])
                q.append(n.right)

        return root

    @staticmethod
    def to_list(root: Self | None) -> list[int]:
        if not root:
            return []

        l = []
        q = deque()
        q.append(root)

        while q:
            n = q.popleft()
            if n:
                l.append(n.val)
                q.append(n.left)
                q.append(n.right)
            else:
                l.append(None)

        # clean up the empty (None) nodes at the tail of last level
        i = len(l)-1
        while i >= 0 and l[i] is None:
            i -= 1

        return l[:i+1] if i >= 0 else []


class Solution:
    def maxPathSum(self, root: TreeNode | None) -> int:
        self.max_sum = float('-inf')

        def max_path_sum(root):
            if not root:
                return 0

            l = max_path_sum(root.left)
            r = max_path_sum(root.right)
            v = root.val
            result = max(v, v+l, v+r)
            self.max_sum = max(self.max_sum, result, v+l+r)

            return result

        max_path_sum(root)
        return self.max_sum


def main():
    root = TreeNode.from_list([1, 2, 3])
    assert Solution().maxPathSum(root) == 6

    root = TreeNode.from_list([-10, 9, 20, None, None, 15, 7])
    assert Solution().maxPathSum(root) == 42


main()
