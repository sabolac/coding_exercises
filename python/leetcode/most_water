#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/container-with-most-water

Container With Most Water
You are given an integer array height of length n. There are n vertical lines
drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the
container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.


Example 1:

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49

Explanation:  In this case, the max area of water the container can contain is
49 between second line (8) and the last (7), min(height[8],height[1])*(8-1)= 49.


Example 2:

Input: height = [1,1]
Output: 1


Constraints:

n == height.length
2 <= n <= 10^5
0 <= height[i] <= 10^4
"""


from typing import List


class Solution:
    def maxArea(self, h: List[int]) -> int:
        max_water = 0

        l = 0
        r = len(h) - 1

        while l < r:
            current = min(h[r], h[l])*(r-l)
            if current > max_water:
                max_water = current

            if h[l] < h[r]:
                l += 1
            else:
                r -= 1

        return max_water


def main():
    assert Solution().maxArea([1, 8, 6, 2, 5, 4, 8, 3, 7]) == 49
    assert Solution().maxArea([1, 1]) == 1


main()
