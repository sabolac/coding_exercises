#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/sum-root-to-leaf-numbers

Sum Root to Leaf Numbers

You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.

Return the total sum of all root-to-leaf numbers. Test cases are generated so
that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.


Example 1:

Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.


Example 2:

Input: root = [4,9,0,5,1]
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.


Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 9
The depth of the tree will not exceed 10.
"""


from typing import Self
from collections import deque


# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val: int = 0, left: Self = None, right: Self = None, next: Self = None):
        self.val = val
        self.left = left
        self.right = right

    @staticmethod
    def from_list(l: list[int]) -> Self | None:
        if not l:
            return None

        root = TreeNode(l[0])
        q = deque()
        q.append(root)

        i = 0
        while i < len(l)-2:
            n = q.popleft()

            i += 1
            if l[i] is not None:
                n.left = TreeNode(l[i])
                q.append(n.left)

            i += 1
            if l[i] is not None:
                n.right = TreeNode(l[i])
                q.append(n.right)

        return root

    @staticmethod
    def to_list(root: Self | None) -> list[int]:
        if not root:
            return []

        l = []
        q = deque()
        q.append(root)

        while q:
            n = q.popleft()
            if n:
                l.append(n.val)
                q.append(n.left)
                q.append(n.right)
            else:
                l.append(None)

        # clean up the empty (None) nodes at the tail of last level
        i = len(l)-1
        while i >= 0 and l[i] is None:
            i -= 1

        return l[:i+1] if i >= 0 else []


class Solution:
    def sumNumbers(self, root: TreeNode | None) -> int:
        return self.sum_recursive(root, 0)

    def sum_recursive(self, root: TreeNode | None, parent_sum: int) -> int:
        current_sum = parent_sum + root.val
        if not root.left and not root.right:
            return current_sum
        total = 0
        if root.left:
            total += self.sum_recursive(root.left, current_sum*10)
        if root.right:
            total += self.sum_recursive(root.right, current_sum*10)

        return total


def main():
    root = TreeNode.from_list([1, 2, 3])
    assert Solution().sumNumbers(root) == 25

    root = TreeNode.from_list([4, 9, 0, 5, 1])
    assert Solution().sumNumbers(root) == 1026


main()
