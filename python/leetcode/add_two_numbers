#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/add-two-numbers/

You are given two non-empty linked lists representing two non-negative integers.
The digits are stored in reverse order, and each of their nodes contains a
single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the
number 0 itself.

Example 1:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.


Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]


Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]


Constraints:

The number of nodes in each linked list is in the range [1, 100]
0 <= Node.val <= 9

It is guaranteed that the list represents a number that does not have leading
zeros.
"""

from typing import Optional


class ListNode:
    """"Definition for singly-linked list"""

    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

    def __str__(self) -> str:
        r = self
        s = '['
        while r:
            s += f'{r.val}, '
            r = r.next
        s = s.rstrip(', ') + ']'
        return s


def add_two_numbers(l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
    result = ListNode()
    current = result
    previous = None
    carry = 0
    while l1 or l2:
        v1, l1 = (l1.val, l1.next) if l1 else (0, None)
        v2, l2 = (l2.val, l2.next) if l2 else (0, None)

        carry, current.val = divmod(v1 + v2 + carry, 10)
        current.next = ListNode(carry)
        previous = current
        current = current.next

    # remove the last node if there was no carry after the last operation
    if carry == 0:
        previous.next = None

    return result


def list_to_linked_list(l):
    if len(l) == 0:
        return None

    result = ListNode(l[0])
    current = result
    for v in l[1:]:
        current.next = ListNode()
        current = current.next
        current.val = v

    return result


def main():

    for l1, l2, r in [
            ([2, 4, 3], [5, 6, 4], [7, 0, 8]),
            ([0], [0], [0]),
            ([9, 9, 9, 9, 9, 9, 9], [9, 9, 9, 9], [8, 9, 9, 9, 0, 0, 0, 1]),
    ]:
        assert str(add_two_numbers(
            list_to_linked_list(l1),
            list_to_linked_list(l2))) == str(r)


main()
