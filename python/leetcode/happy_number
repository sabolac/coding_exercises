#!/usr/bin/env python3

"""
Ref: https://leetcode.com/problems/happy-number

Happy Number

Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares
of its digits. Repeat the process until the number equals 1 (where it will
stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.



Example 1:

Input: n = 19
Output: true

Explanation:
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1

Example 2:

Input: n = 2
2^2 = 4
4^2 = 16
1 + 36 = 37
9 + 49 = 58
25 + 64 = 89
64 + 81 = 145
1 + 16 + 25 = 42
16 + 4 = 20
4 + 0 = 4 # seen before

Output: false


Constraints:

1 <= n <= 2^31 - 1
"""


class Solution:
    def isHappy(self, n: int) -> bool:
        s = set()
        while True:
            n = self.sum_digits_squared(n)
            if n == 1:
                return True
            if n in s:
                return False
            s.add(n)

    def sum_digits_squared(self, n: int) -> int:
        sm = 0

        while n > 0:
            n, r = divmod(n, 10)
            sm += r**2

        return sm


def main():
    assert Solution().isHappy(19)
    assert Solution().isHappy(1)
    assert not Solution().isHappy(2)
    assert not Solution().isHappy(3)
    assert not Solution().isHappy(4)
    assert not Solution().isHappy(5)
    assert not Solution().isHappy(6)
    assert Solution().isHappy(7)
    assert not Solution().isHappy(8)
    assert not Solution().isHappy(9)


main()
