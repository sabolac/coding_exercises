#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/trapping-rain-water

Given n non-negative integers representing an elevation map where the width of
each bar is 1, compute how much water it can trap after raining.


Example 1:

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6


Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9


Constraints:

n == height.length
1 <= n <= 2 * 10^4
0 <= height[i] <= 10^5
"""


from typing import List


class Solution:
    def trap_slow(self, height: List[int]) -> int:
        """O(n^2) time O(n) space"""
        water = 0
        n = len(height)

        sorted_heights = [(v, i) for i, v in enumerate(height)]
        sorted_heights.sort(key=lambda x: x[0], reverse=True)

        remaining = set(range(n))
        for i in range(n-1):
            h = min(sorted_heights[i][0], sorted_heights[i+1][0])
            s = sorted_heights[i][1]
            e = sorted_heights[i+1][1]
            if e < s:
                s, e = e, s
            remaining.discard(s)
            remaining.discard(e)
            for j in range(s+1, e):
                if j in remaining:
                    water += h - height[j]
                    remaining.remove(j)

        return water

    def trap_with_drain(self, height: List[int]) -> int:
        """O(n) time O(1) space"""
        n = len(height)
        total_water = 0
        max_peak = 0

        # fill in water from the front, assuming there is an infinitely high
        # wall at the right end
        current_peak = 0
        for i in range(n):
            if height[i] > max_peak:
                max_peak = height[i]

            if height[i] > current_peak:
                current_peak = height[i]
            elif height[i] < current_peak:
                total_water += current_peak - height[i]

        # drain the water out of the back
        current_peak = 0
        for i in range(n-1, -1, -1):
            if height[i] == max_peak:
                break

            if height[i] > current_peak:
                current_peak = height[i]

            total_water -= max_peak - current_peak

        return total_water

    def trap(self, height: List[int]) -> int:
        """O(n) time O(1) space"""
        n = len(height)
        total_water = 0
        max_height = 0
        max_height_index = 0

        for i in range(n):
            if height[i] > max_height:
                max_height = height[i]
                max_height_index = i

        # fill from the left of the max_height_index
        current_peak = 0
        for i in range(max_height_index):
            if height[i] > current_peak:
                current_peak = height[i]
            total_water += current_peak - height[i]

        # fill from the right of the max_height_index
        current_peak = 0
        for i in range(n-1, max_height_index-1, -1):
            if height[i] > current_peak:
                current_peak = height[i]
            total_water += current_peak - height[i]

        return total_water


def main():
    assert Solution().trap([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]) == 6
    assert Solution().trap([4, 2, 0, 3, 2, 5]) == 9


main()
