#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/basic-calculator

Basic Calculator

Given a string s representing a valid expression, implement a basic calculator
to evaluate it, and return the result of the evaluation.

Note: You are not allowed to use any built-in function which evaluates strings
as mathematical expressions, such as eval().


Example 1:

Input: s = "1 + 1"
Output: 2


Example 2:

Input: s = " 2-1 + 2 "
Output: 3


Example 3:

Input: s = "(1+(4+5+2)-3)+(6+8)"
Output: 23


Constraints:

1 <= s.length <= 3 * 10^5
s consists of digits, '+', '-', '(', ')', and ' '.
s represents a valid expression.
'+' is not used as a unary operation (i.e., "+1" and "+(2 + 3)" is invalid).
'-' could be used as a unary operation (i.e., "-1" and "-(2 + 3)" is valid).
There will be no two consecutive operators in the input.
Every number and running calculation will fit in a signed 32-bit integer.
"""


class Solution:
    def calculate(self, s: str) -> int:
        neg = False
        pc = 0  # parenthesis count
        prev = ""
        stack = []
        total = 0

        i = 0
        while i < len(s):
            c = s[i]
            i += 1
            match c:
                case '(':
                    if prev == '-':
                        if pc > 0:
                            stack.append(pc)
                        pc = 1
                        neg = not neg
                    elif pc > 0:
                        pc += 1
                case ')':
                    if pc > 0:
                        pc -= 1
                        if pc == 0:
                            neg = not neg
                            if stack:
                                pc = stack.pop()
                case d if d in '0123456789':
                    j = i
                    while j < len(s) and s[j] in '0123456789':
                        j += 1
                    num = int(s[i-1:j])
                    i = j

                    if neg != (prev == '-'):
                        num *= -1
                    total += num

            if c != ' ':
                prev = c

        return total


def main():
    expression = "-(1 - 1 )"
    assert Solution().calculate(expression) == 0

    expression = "-(-1)"
    assert Solution().calculate(expression) == 1

    expression = "1 + 1  + 1 + (1 - 1 )"
    assert Solution().calculate(expression) == 3

    expression = "1 + 1  + 1 - (1 - 1 )"
    assert Solution().calculate(expression) == 3

    expression = " 2-1 + 2 "
    assert Solution().calculate(expression) == 3

    expression = "-(-3-(6-1+(3+1))-4)"
    assert Solution().calculate(expression) == 16


main()
