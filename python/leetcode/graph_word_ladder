#!/usr/bin/env python3

"""
Ref:

Word Ladder

A transformation sequence from word beginWord to word endWord using a dictionary
wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

Every adjacent pair of words differs by a single letter.
Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be
in wordList.
sk == endWord

Given two words, beginWord and endWord, and a dictionary wordList, return the
number of words in the shortest transformation sequence from beginWord to
endWord, or 0 if no such sequence exists.


Example 1:

Input: beginWord = "hit", endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is
"hit" -> "hot" -> "dot" -> "dog" -> cog", which is 5 words long.


Example 2:

Input: beginWord = "hit", endWord = "cog",
wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid
transformation sequence.


Constraints:

1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord, endWord, and wordList[i] consist of lowercase English letters.
beginWord != endWord
All the words in wordList are unique.
"""


from collections import deque


class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: list[str]) -> int:
        if endWord not in wordList:
            return 0

        wordList.append(beginWord)
        neighbors: dict[str, list[str]] = {}
        for w in wordList:
            for i in range(len(w)):
                k = w[:i]+'*'+w[i+1:]
                if k not in neighbors:
                    neighbors[k] = []
                neighbors[k].append(w)

        visited = set([beginWord])
        q = deque([beginWord])
        count = 1
        while q:
            for _ in range(len(q)):
                w = q.popleft()
                if w == endWord:
                    return count
                for i in range(len(w)):
                    k = w[:i]+'*'+w[i+1:]
                    for nbr in neighbors[k]:
                        if nbr not in visited:
                            q.append(nbr)
                            visited.add(nbr)
            count += 1
        return 0


def main():
    beginWord = "hit"
    endWord = "cog"
    wordList = ["hot", "dot", "dog", "lot", "log", "cog"]
    assert Solution().ladderLength(beginWord, endWord, wordList) == 5

    beginWord = "hit"
    endWord = "cog"
    wordList = ["hot", "dot", "dog", "lot", "log"]
    assert Solution().ladderLength(beginWord, endWord, wordList) == 0


main()
