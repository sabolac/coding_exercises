#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/permutations

Permutations

Given an array nums of distinct integers, return all the possible permutations.
You can return the answer in any order.


Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]


Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]


Example 3:

Input: nums = [1]
Output: [[1]]


Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.
"""


class Solution:
    def permute(self, nums: list[int]) -> list[list[int]]:
        result = []
        permutation = []

        def backtrack():
            if len(permutation) == len(nums):
                result.append(permutation[:])
                return

            for num in nums:
                if num not in permutation:
                    permutation.append(num)
                    backtrack()
                    permutation.pop()

        backtrack()

        return result

    def permute2(self, nums: list[int]) -> list[list[int]]:
        result = []

        def backtrack(i):
            if i == len(nums):
                result.append(nums[:])
                return
            for j in range(i, len(nums)):
                nums[i], nums[j] = nums[j], nums[i]
                backtrack(i+1)
                nums[i], nums[j] = nums[j], nums[i]

        backtrack(0)
        return result


def main():
    assert Solution().permute([1]) == [[1]]
    assert Solution().permute([0, 1]) == [[0, 1], [1, 0]]
    assert Solution().permute([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3],
                                             [2, 3, 1], [3, 1, 2], [3, 2, 1]]


main()
