#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/letter-combinations-of-a-phone-number


Letter Combinations of a Phone Number

Given a string containing digits from 2-9 inclusive, return all possible letter
combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given
below. Note that 1 does not map to any letters.


Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]


Example 2:

Input: digits = ""
Output: []


Example 3:

Input: digits = "2"
Output: ["a","b","c"]


Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].
"""


# from itertools import combinations, permutations
# from pprint import pp

# pp(list(combinations(range(4), 4)))
# pp(list(permutations(range(4), 4)))


class Solution:
    d_2_l = {
        '2': ['a', 'b', 'c'],
        '3': ['d', 'e', 'f'],
        '4': ['g', 'h', 'i'],
        '5': ['j', 'k', 'l'],
        '6': ['m', 'n', 'o'],
        '7': ['p', 'q', 'r', 's'],
        '8': ['t', 'u', 'v'],
        '9': ['w', 'x', 'y', 'z'],
    }

    def letterCombinations(self, digits: str) -> list[str]:
        if len(digits) == 0:
            return []
        if len(digits) == 1:
            return Solution.d_2_l[digits]

        d = digits[0]
        rest = digits[1:]
        rest_combinations = self.letterCombinations(rest)
        result = []
        for c in Solution.d_2_l[d]:
            result.extend([c+r for r in rest_combinations])

        return result

    def letterCombinations2(self, digits: str) -> list[str]:
        if not digits:
            return []

        phone_map = {
            '2': 'abc',
            '3': 'def',
            '4': 'ghi',
            '5': 'jkl',
            '6': 'mno',
            '7': 'pqrs',
            '8': 'tuv',
            '9': 'wxyz'
        }

        def backtrack(combination, next_digits):
            if len(next_digits) == 0:
                output.append(combination)
            else:
                for letter in phone_map[next_digits[0]]:
                    backtrack(combination + letter, next_digits[1:])

        output = []
        backtrack("", digits)
        return output

    def letterCombinations_iterative(self, digits: str) -> list[str]:
        if not digits:
            return []

        phone_map = {
            '2': 'abc',
            '3': 'def',
            '4': 'ghi',
            '5': 'jkl',
            '6': 'mno',
            '7': 'pqrs',
            '8': 'tuv',
            '9': 'wxyz'
        }
        combinations = [""]

        for digit in digits:
            new_combinations = []
            for combination in combinations:
                for letter in phone_map[digit]:
                    new_combinations.append(combination + letter)
            combinations = new_combinations

        return combinations


def main():

    digits = "23"
    output = ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]
    assert Solution().letterCombinations(digits) == output

    digits = "2"
    output = ['a', 'b', 'c']
    assert Solution().letterCombinations(digits) == output

    digits = ""
    output = []
    assert Solution().letterCombinations(digits) == output


main()
