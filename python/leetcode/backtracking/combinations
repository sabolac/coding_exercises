#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/combinations


Combinations

Given two integers n and k, return all possible combinations of k numbers chosen
from the range [1, n].

You may return the answer in any order.


Example 1:

Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be
the same combination.
Example 2:

Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.


Constraints:

1 <= n <= 20
1 <= k <= n
"""

from itertools import combinations


class Solution:
    def combine_builtin(self, n: int, k: int) -> list[list[int]]:
        return list(combinations(range(1, n+1), k))

    def combine_recursive(self, n: int, k: int) -> list[list[int]]:
        if k == 0 or n == 0:
            return []

        if k == 1:
            return [[i] for i in range(1, n+1)]

        if k == n:
            return [list(range(1, n+1))]

        result = []
        result.extend(self.combine(n-1, k))
        for c in self.combine(n-1, k-1):
            c.append(n)
            result.append(c)
        return result

    def combine_iterative(self, n: int, k: int) -> list[list[int]]:
        res = [[j] for j in range(k, n+1)]

        for i in range(1, k):
            tmp = []
            for j in range(k-i, n+1):
                for r in res:
                    if j < r[0]:
                        tmp.append([j]+r)
            res = tmp

        return res

    # Approach

    # Create an empty list res to store the final combinations and an empty list
    # comb to store the current combination being formed.

    # Define a recursive function backtrack(start), which will generate all
    # possible combinations of size k from the numbers starting from start up to
    # n.

    # In the backtrack function:

    # If the length of comb becomes equal to k, it means we have formed a valid
    # combination, so we append a copy of the current comb list to the res list.
    # We use comb[:] to create a copy of the list since lists are mutable in
    # Python, and we want to preserve the combination at this point without
    # being modified later.

    # If the length of comb is not equal to k, we continue the recursion.

    # Within the backtrack function, use a loop to iterate over the numbers
    # starting from start up to n.

    # For each number num in the range, add it to the current comb list to form
    # the combination.

    # Make a recursive call to backtrack with start incremented by 1. This
    # ensures that each number can only be used once in each combination,
    # avoiding duplicate combinations.

    # After the recursive call, remove the last added number from the comb list
    # using comb.pop(). This allows us to backtrack and try other numbers for
    # the current position in the combination.

    # Start the recursion by calling backtrack(1) with start initially set to 1,
    # as we want to start forming combinations with the numbers from 1 to n.

    # After the recursion is complete, the res list will contain all the valid
    # combinations of size k formed from the numbers 1 to n. Return res as the
    # final result.

    # The code uses a recursive backtracking approach to generate all the
    # combinations efficiently. It explores all possible combinations, avoiding
    # duplicates and forming valid combinations of size k. The result res will
    # contain all such combinations at the end.

    # Complexity
    # Time complexity: O(n * k)
    # n is the number of elements and k is the size of the subset. The backtrack
    # function is called n times, because there are n possible starting points
    # for the subset. For each starting point, the backtrack function iterates
    # through all k elements. This is because the comb list must contain all k
    # elements in order for it to be a valid subset.

    # Space complexity: O(k)
    # The comb list stores at most k elements. This is because the backtrack
    # function only adds elements to the comb list when the subset is not yet
    # complete.
    def combine(self, n: int, k: int) -> list[list[int]]:
        result = []
        comb = []

        def backtrack(start):
            if len(comb) == k:
                result.append(comb[:])
                return

            for num in range(start, n + 1):
                comb.append(num)
                backtrack(num + 1)
                comb.pop()

        backtrack(1)
        return result

    # see also for more info:
    # https://leetcode.com/problems/combinations/solutions/844096/backtracking-cheatsheet-simple-solution


def main():
    print(Solution().combine_builtin(4, 2))
    print(Solution().combine(5, 3))

    assert Solution().combine(4, 2) == [
        [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]]

    assert Solution().combine(1, 1) == [[1]]


main()
