#!/usr/bin/env python3

"""
Ref: https://leetcode.com/problems/merge-sorted-array

Merge Sorted Arrays

You are given two integer arrays nums1 and nums2, sorted in non-decreasing order,
and two integers m and n, representing the number of elements in nums1 and nums2
respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be
stored inside the array nums1. To accommodate this, nums1 has a length of m + n,
where the first m elements denote the elements that should be merged, and the
last n elements are set to 0 and should be ignored. nums2 has a length of n.



Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming
from nums1.

Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and []. The result of the merge is [1].

Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1]. The result of the merge
is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only
there to ensure the merge result can fit in nums1.


Constraints:

nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-10^9 <= nums1[i], nums2[j] <= 10^9


Follow up: Can you come up with an algorithm that runs in O(m + n) time?
"""

from typing import List
import random


class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        assert len(nums1) == m + n
        assert len(nums2) == n

        i = m + n - 1
        i1 = m-1
        i2 = n-1
        while i2 >= 0:
            if i1 >= 0 and nums1[i1] > nums2[i2]:
                nums1[i] = nums1[i1]
                i1 -= 1
            else:
                nums1[i] = nums2[i2]
                i2 -= 1
            i -= 1


def main():
    nums1, m = [1, 2, 3, 0, 0, 0], 3
    nums2, n = [2, 5, 6], 3
    Solution().merge(nums1, m, nums2, n)
    assert nums1 == [1, 2, 2, 3, 5, 6]

    nums1, m = [1], 1
    nums2, n = [], 0
    Solution().merge(nums1, m, nums2, n)
    assert nums1 == [1]

    nums1, m = [0], 0
    nums2, n = [1], 1
    Solution().merge(nums1, m, nums2, n)
    assert nums1 == [1]

    for i in range(500):
        nums2 = random.sample(range(10000), i)
        nums2.sort()
        n = len(nums2)

        nums1 = random.sample(range(10000), random.randint(0, 2*i))
        nums1.sort()
        m = len(nums1)
        expected_result = nums1 + nums2
        expected_result.sort()

        nums1.extend([0]*n)

        Solution().merge(nums1, m, nums2, n)
        assert nums1 == expected_result


main()
