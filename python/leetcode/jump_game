#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/jump-game

You are given an integer array nums. You are initially positioned at the array's
first index, and each element in the array represents your maximum jump length
at that position.

Return true if you can reach the last index, or false otherwise.


Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.


Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump
length is 0, which makes it impossible to reach the last index.


Constraints:

1 <= nums.length <= 10^4
0 <= nums[i] <= 10^5
"""


from typing import List
from collections import deque


class Solution:
    # At each step, we keep track of the furthest reachable index. The nature of
    # the problem (eg. maximal jumps where you can hit a range of targets
    # instead of singular jumps where you can only hit one target) is that for
    # an index to be reachable, each of the previous indices have to be
    # reachable. Hence, it suffices that we iterate over each index, and if we
    # ever encounter an index that is not reachable, we abort and return false.
    # By the end, we will have iterated to the last index. If the loop finishes,
    # then the last index is reachable.

    # Time complexity: O(N)
    # Space complexity: O(1)
    def canJump(self, nums: List[int]) -> bool:
        max_reachable_index = 0
        for i in range(len(nums)):
            if i > max_reachable_index:
                return False
            max_reachable_index = max(max_reachable_index, i+nums[i])
            if max_reachable_index >= len(nums) - 1:
                return True
        # we would never reach this line but just for completeness
        return True


def main():
    assert Solution().canJump([2, 3, 1, 1, 4])
    assert not Solution().canJump([3, 2, 1, 0, 4])
    assert Solution().canJump([2, 0])

    # create an unreachable list, e.g. for x = 5, l = [5, 5, 4, 3, 2, 1, 0, 0]
    x = 100000
    l = list(range(x, -1, -1))
    l.append(0)
    l.insert(0, x)
    assert not Solution().canJump(l)


main()
