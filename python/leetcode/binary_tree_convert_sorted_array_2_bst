#!/usr/bin/env


"""
Ref: https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree

Convert Sorted Array to Binary Search Tree

Given an integer array nums where the elements are sorted in ascending order,
convert it to a height-balanced binary search tree.



Example 1:

Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:


Example 2:

Input: nums = [1,3]
Output: [3,1]
Explanation: [1,null,3] and [3,1] are both height-balanced BSTs.


Constraints:

1 <= nums.length <= 10^4
-10^4 <= nums[i] <= 10^4
nums is sorted in a strictly increasing order.
"""


from typing import Self
from collections import deque


class TreeNode:
    def __init__(self, val: int = 0, left: Self = None, right: Self = None, next: Self = None):
        self.val = val
        self.left = left
        self.right = right

    @staticmethod
    def from_list(l: list[int]) -> Self | None:
        if not l:
            return None

        root = TreeNode(l[0])
        q = deque()
        q.append(root)

        i = 0
        while i < len(l)-2:
            n = q.popleft()

            i += 1
            if l[i] is not None:
                n.left = TreeNode(l[i])
                q.append(n.left)

            i += 1
            if l[i] is not None:
                n.right = TreeNode(l[i])
                q.append(n.right)

        return root

    @staticmethod
    def to_list(root: Self | None) -> list[int]:
        if not root:
            return []

        l = []
        q = deque()
        q.append(root)

        while q:
            n = q.popleft()
            if n:
                l.append(n.val)
                q.append(n.left)
                q.append(n.right)
            else:
                l.append(None)

        # clean up the empty (None) nodes at the tail of last level
        i = len(l)-1
        while i >= 0 and l[i] is None:
            i -= 1

        return l[:i+1] if i >= 0 else []


class Solution:
    def sortedArrayToBST(self, nums: list[int]) -> TreeNode | None:
        if not nums:
            return None

        def sorted_array_to_bst(l: int, r: int):
            if l > r:
                return None

            mid = l + (r-l)//2
            n = TreeNode(nums[mid])
            n.left = sorted_array_to_bst(l, mid-1)
            n.right = sorted_array_to_bst(mid+1, r)

            return n

        return sorted_array_to_bst(0, len(nums)-1)


def main():
    nums = [-10, -3, 0, 5, 9]
    n = Solution().sortedArrayToBST(nums)
    output = [0, -10, 5, None, -3, None, 9]
    assert TreeNode.to_list(n) == output

    nums = [1, 3]
    n = Solution().sortedArrayToBST(nums)
    output = [1, None, 3]
    assert TreeNode.to_list(n) == output


main()
