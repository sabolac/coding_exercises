#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/zigzag-conversion

The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of
rows like this: (you may want to display this pattern in a fixed font for better
legibility)

P   A   H   N
A P L S I I G
Y   I   R

And then read line by line: "PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number
of rows:

string convert(string s, int numRows);


Example 1:

Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"


Example 2:

Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"

Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I

Example 3:

Input: s = "A", numRows = 1
Output: "A"


Constraints:

1 <= s.length <= 1000
s consists of English letters (lower-case and upper-case), ',' and '.'.
1 <= numRows <= 1000
"""


class Solution:
    def convert1(self, s: str, numRows: int) -> str:
        # this version uses only one string zs
        if numRows == 1:
            return s

        zs = ""  # zigzag string
        N = len(s)
        T = 2*numRows-2
        for x in range(numRows):
            i = 0
            while True:
                c = i*T + x
                if c >= N:
                    break
                zs += s[c]

                # for rows except first and last, we have one more element for
                # the zigzag
                if x not in [0, numRows-1]:
                    c = (i+1)*T - x
                    if c >= N:
                        break
                    zs += s[c]

                i += 1

        return zs

    def convert(self, s: str, numRows: int) -> str:
        # this version uses one string for each row
        if numRows == 1:
            return s

        rows = [""]*numRows
        i = 0
        nxt = 1
        for c in s:
            rows[i] += c
            if i == 0:
                nxt = 1
            elif i == numRows-1:
                nxt = -1

            i += nxt

        return "".join(rows)


def main():
    assert Solution().convert("PAYPALISHIRING", 1) == "PAYPALISHIRING"
    assert Solution().convert("PAYPALISHIRING", 2) == "PYAIHRNAPLSIIG"
    assert Solution().convert("PAYPALISHIRING", 3) == "PAHNAPLSIIGYIR"
    assert Solution().convert("PAYPALISHIRING", 4) == "PINALSIGYAHRPI"
    assert Solution().convert("PAYPALISHIRING", 5) == "PHASIYIRPLIGAN"
    assert Solution().convert("PAYPALISHIRING", 6) == "PRAIIYHNPSGAIL"
    assert Solution().convert("PAYPALISHIRING", 7) == "PNAIGYRPIAHLSI"
    assert Solution().convert("PAYPALISHIRING", 8) == "PAGYNPIARLIIHS"
    assert Solution().convert("PAYPALISHIRING", 9) == "PAYPGANLIIRSIH"
    assert Solution().convert("PAYPALISHIRING", 10) == "PAYPALGINSIHRI"
    assert Solution().convert("PAYPALISHIRING", 11) == "PAYPALISGHNIIR"
    assert Solution().convert("PAYPALISHIRING", 12) == "PAYPALISHIGRNI"
    assert Solution().convert("PAYPALISHIRING", 13) == "PAYPALISHIRIGN"
    assert Solution().convert("PAYPALISHIRING", 14) == "PAYPALISHIRING"
    assert Solution().convert("PAYPALISHIRING", 15) == "PAYPALISHIRING"
    assert Solution().convert("PAYPALISHIRING", 16) == "PAYPALISHIRING"
    assert Solution().convert("PAYPALISHIRING", 20) == "PAYPALISHIRING"
    assert Solution().convert("PAYPALISHIRING", 200) == "PAYPALISHIRING"

    assert Solution().convert("1", 1) == "1"
    assert Solution().convert("1", 2) == "1"
    assert Solution().convert("12", 2) == "12"
    assert Solution().convert("123", 2) == "132"
    assert Solution().convert("123", 3) == "123"
    assert Solution().convert("1234", 3) == "1243"


main()
