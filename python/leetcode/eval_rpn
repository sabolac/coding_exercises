#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/evaluate-reverse-polish-notation

Evaluate Reverse Polish Notation

You are given an array of strings tokens that represents an arithmetic
expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the
expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit
integer.


Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9


Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6


Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22


Constraints:

1 <= tokens.length <= 10^4
tokens[i] is either an operator: "+", "-", "*", or "/", or an integer in the
range [-200, 200].
"""

from typing import List


class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        for t in tokens:
            if t in '*/-+':
                v1 = stack.pop()
                v2 = stack.pop()
                result = 0
                if t == '*':
                    result = v1*v2
                elif t == '/':
                    result = int(v2/v1)
                elif t == '-':
                    result = v2-v1
                elif t == '+':
                    result = v1+v2
                stack.append(result)
            else:
                stack.append(int(t))
        return stack.pop()


def main():
    assert Solution().evalRPN(["2", "1", "+", "3", "*"]) == 9
    assert Solution().evalRPN(["4", "13", "5", "/", "+"]) == 6
    tokens = [
        "10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"]
    assert Solution().evalRPN(tokens) == 22


main()
