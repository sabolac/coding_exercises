#!/usr/bin/env python3

"""
Ref: https://leetcode.com/problems/number-of-islands

Number of Islands

Given an m x n 2D binary grid grid which represents a map of '1's (land) and
'0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands
horizontally or vertically. You may assume all four edges of the grid are all
surrounded by water.


Example 1:

Input: grid = [
  ['1','1','1','1','0'],
  ['1','1','0','1','0'],
  ['1','1','0','0','0'],
  ['0','0','0','0','0']
]
Output: 1

Example 2:

Input: grid = [
  ['1','1','0','0','0'],
  ['1','1','0','0','0'],
  ['0','0','1','0','0'],
  ['0','0','0','1','1']
]
Output: 3


Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.
"""


class Solution:
    def numIslands(self, grid: list[list[str]]) -> int:
        row_count = len(grid)
        column_count = len(grid[0])
        num_islands = 0
        for i in range(row_count):
            for j in range(column_count):
                if grid[i][j] == '1':
                    num_islands += 1
                    stack = [(i, j)]
                    while stack:
                        p, q = stack.pop()
                        if grid[p][q] == '1':
                            grid[p][q] = 'x'
                            if p > 0:
                                stack.append((p-1, q))
                            if p < row_count-1:
                                stack.append((p+1, q))
                            if q > 0:
                                stack.append((p, q-1))
                            if q < column_count-1:
                                stack.append((p, q+1))

        return num_islands


def main():
    grid = [
        ['1', '1', '1', '1', '0'],
        ['1', '1', '0', '1', '0'],
        ['1', '1', '0', '0', '0'],
        ['0', '0', '0', '0', '0']
    ]
    assert Solution().numIslands(grid) == 1

    grid = [
        ['1', '1', '0', '0', '0'],
        ['1', '1', '0', '0', '0'],
        ['0', '0', '1', '0', '0'],
        ['0', '0', '0', '1', '1']
    ]
    assert Solution().numIslands(grid) == 3


main()
