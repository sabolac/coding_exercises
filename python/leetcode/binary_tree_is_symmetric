#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/symmetric-tree

Symmetric Tree

Given the root of a binary tree, check whether it is a mirror of itself (i.e.,
symmetric around its center).

Example 1:

Input: root = [1,2,2,3,4,4,3]
Output: true


Example 2:

Input: root = [1,2,2,null,3,null,3]
Output: false


Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100

Follow up: Could you solve it both recursively and iteratively?
"""


from typing import Self
from collections import deque


# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val: int = 0, left: Self = None, right: Self = None):
        self.val = val
        self.left = left
        self.right = right

    @staticmethod
    def from_list(l: list[int]) -> Self | None:
        if not l:
            return None

        root = TreeNode(l[0])
        q = deque()
        q.append(root)

        i = 0
        while i < len(l)-2:
            n = q.popleft()

            i += 1
            if l[i] is not None:
                n.left = TreeNode(l[i])
                q.append(n.left)

            i += 1
            if l[i] is not None:
                n.right = TreeNode(l[i])
                q.append(n.right)

        return root

    @staticmethod
    def to_list(root: Self | None) -> list[int]:
        if not root:
            return []

        l = []
        q = deque()
        q.append(root)

        while q:
            n = q.popleft()
            if n:
                l.append(n.val)
                # do not append children if they are both None
                if n.left or n.right:
                    q.append(n.left)
                    q.append(n.right)
            else:
                l.append(None)
        return l


class Solution:
    def isSymmetric(self, root: TreeNode | None) -> bool:
        if not root:
            return True

        q = deque()
        q.append(root.left)
        q.append(root.right)

        while q:
            ln = q.popleft()
            rn = q.popleft()

            if not ln or not rn:
                if ln != rn:
                    return False
                else:
                    continue

            if ln.val != rn.val:
                return False

            q.append(ln.left)
            q.append(rn.right)
            q.append(ln.right)
            q.append(rn.left)

        return True

    def isSymmetric_recursive(self, root: TreeNode | None) -> bool:
        if not root:
            return True

        return self.is_mirror(root.left, root.right)

    def is_mirror(self, p: TreeNode | None, q: TreeNode | None) -> bool:
        if p and q:
            return p.val == q.val and self.is_mirror(p.left, q.right) and self.is_mirror(p.right, q.left)
        return p == q


def main():
    root = TreeNode.from_list([1, 2, 2, 3, 4, 4, 3])
    assert Solution().isSymmetric(root)

    root = TreeNode.from_list([1, 2, 2, None, 3, None, 3])
    assert not Solution().isSymmetric(root)


main()
