#!/usr/bin/env python3

"""
Ref: https://leetcode.com/problems/lru-cache

LRU Cache

Design a data structure that follows the constraints of a Least Recently Used
(LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.

int get(int key) Return the value of the key if the key exists, otherwise return
-1.

void put(int key, int value) Update the value of the key if the key exists.
Otherwise, add the key-value pair to the cache. If the number of keys exceeds
the capacity from this operation, evict the least recently used key.

The functions get and put must each run in O(1) average time complexity.


Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4


Constraints:

1 <= capacity <= 3000
0 <= key <= 10^4
0 <= value <= 10^5
At most 2 * 10^5 calls will be made to get and put.
"""


class Node:
    def __init__(self, key: int = 0, value: int = 0):
        self.key = key
        self.val = value
        self.next = None
        self.prev = None


class LRUCache:

    def __init__(self, capacity: int):
        self._head = Node()
        self._tail = Node()
        self._head.next = self._tail
        self._tail.prev = self._head

        self._capacity = capacity
        self._count = 0
        self._map = {}

    def get(self, key: int) -> int:
        if key not in self._map:
            return -1

        n = self._map[key]
        self._move_to_head(n)

        return n.val

    def put(self, key: int, value: int) -> None:
        if key not in self._map:
            n = Node(key, value)
            self._map[key] = n
            self._insert_to_head(n)

            if self._count < self._capacity:
                self._count += 1
                return

            self._evict_lru()
            return

        # key exists, update value and move to head
        n = self._map[key]
        n.val = value
        self._move_to_head(n)

    def _evict_lru(self) -> None:
        n = self._tail.prev
        del self._map[n.key]
        p = n.prev
        p.next = self._tail
        self._tail.prev = p

    def _move_to_head(self, n: Node) -> None:
        # move the node to the head of the LRU list
        if n == self._head.next:
            return  # already at the head

        n.prev.next = n.next
        n.next.prev = n.prev
        self._insert_to_head(n)

    def _insert_to_head(self, n: Node) -> None:
        n.prev = self._head
        n.next = self._head.next
        self._head.next = n
        n.next.prev = n


def main():
    lru_cache = LRUCache(2)
    lru_cache.put(1, 1)  # cache is {1=1}
    lru_cache.put(2, 2)  # cache is {1=1, 2=2}
    assert (lru_cache.get(1) == 1)
    lru_cache.put(3, 3)  # LRU key was 2, evicts key 2, cache is {1=1, 3=3}
    assert (lru_cache.get(2) == -1)
    lru_cache.put(4, 4)  # LRU key was 1, evicts key 1, cache is {4=4, 3=3}
    assert (lru_cache.get(1) == -1)
    assert (lru_cache.get(3) == 3)
    assert (lru_cache.get(4) == 4)


main()
