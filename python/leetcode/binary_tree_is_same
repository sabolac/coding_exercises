#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/same-tree

Same Tree

Given the roots of two binary trees p and q, write a function to check if they
are the same or not.

Two binary trees are considered the same if they are structurally identical, and
the nodes have the same value.



Example 1:

Input: p = [1,2,3], q = [1,2,3]
Output: true


Example 2:

Input: p = [1,2], q = [1,null,2]
Output: false


Example 3:

Input: p = [1,2,1], q = [1,1,2]
Output: false


Constraints:

The number of nodes in both trees is in the range [0, 100].
-10^4 <= Node.val <= 10^4
"""


from typing import Self
from collections import deque


# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val: int = 0, left: Self = None, right: Self = None):
        self.val = val
        self.left = left
        self.right = right

    @staticmethod
    def from_list(l: list[int]) -> Self | None:
        if not l:
            return None

        root = TreeNode(l[0])
        q = deque()
        q.append(root)

        i = 0
        while i < len(l)-2:
            n = q.popleft()

            i += 1
            if l[i] is not None:
                n.left = TreeNode(l[i])
                q.append(n.left)

            i += 1
            if l[i] is not None:
                n.right = TreeNode(l[i])
                q.append(n.right)

        return root


class Solution:
    def isSameTree(self, p: TreeNode | None, q: TreeNode | None) -> bool:
        if p is None or q is None:
            return p == q

        if p.val != q.val:
            return False

        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)

    def isSameTree_stack(self, p: TreeNode | None, q: TreeNode | None) -> bool:
        s = deque()

        s.append(p)
        s.append(q)
        while s:
            l = s.pop()
            r = s.pop()
            if (not l) != (not r):
                return False
            if l:
                if l.val != r.val:
                    return False
                s.append(l.left)
                s.append(r.left)
                s.append(l.right)
                s.append(r.right)

        return True

    def isSameTree_queue(self, p: TreeNode | None, q: TreeNode | None) -> bool:
        s = deque()

        s.append(p)
        s.append(q)
        while s:
            l = s.popleft()
            r = s.popleft()
            if (not l) != (not r):
                return False
            if l:
                if l.val != r.val:
                    return False
                s.append(l.left)
                s.append(r.left)
                s.append(l.right)
                s.append(r.right)

        return True


def main():
    r1 = TreeNode.from_list([1, 2, 3])
    r2 = TreeNode.from_list([1, 2, 3])
    assert Solution().isSameTree(r1, r2)

    r1 = TreeNode.from_list([1, 2])
    r2 = TreeNode.from_list([1, None, 2])
    assert not Solution().isSameTree(r1, r2)

    r1 = TreeNode.from_list([1, 2, 1])
    r2 = TreeNode.from_list([1, 1, 2])
    assert not Solution().isSameTree(r1, r2)

    r1 = TreeNode.from_list([3, 9, 20, None, None, 15, 7])
    r2 = TreeNode.from_list([3, 9, 20, None, None, 15, 7])
    assert Solution().isSameTree(r1, r2)


main()
