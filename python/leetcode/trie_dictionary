# /usr/bin/env python3
"""
Ref: https://leetcode.com/problems/design-add-and-search-words-data-structure

Design Add and Search Words Data Structure

Design a data structure that supports adding new words and finding if a string
matches any previously added string.

Implement the WordDictionary class:

WordDictionary() Initializes the object.
void addWord(word) Adds word to the data structure, it can be matched later.
bool search(word) Returns true if there is any string in the data structure that
matches word or false otherwise. word may contain dots '.' where dots can be
matched with any letter.


Example:

Input
["WordDictionary","addWord","addWord","addWord","search","search","search","search"]
[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]
Output
[null,null,null,null,false,true,true,true]

Explanation
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord("bad");
wordDictionary.addWord("dad");
wordDictionary.addWord("mad");
wordDictionary.search("pad"); // return False
wordDictionary.search("bad"); // return True
wordDictionary.search(".ad"); // return True
wordDictionary.search("b.."); // return True


Constraints:

1 <= word.length <= 25
word in addWord consists of lowercase English letters.
word in search consist of '.' or lowercase English letters.
There will be at most 2 dots in word for search queries.
At most 10^4 calls will be made to addWord and search.
"""

from collections import deque


class TrieNode:
    def __init__(self):
        self.children: dict[str, TrieNode] = {}
        self.end_word = False


class WordDictionary():

    def __init__(self):
        self.root = TrieNode()

    def addWord(self, word: str) -> None:
        n = self.root
        for c in word:
            if c not in n.children:
                n.children[c] = TrieNode()
            n = n.children[c]
        n.end_word = True

    def search(self, word: str) -> bool:
        q = deque([self.root])

        for c in word:
            for _ in range(len(q)):
                n = q.popleft()
                if c == '.':
                    q.extend(n.children.values())
                elif c in n.children:
                    q.append(n.children[c])

        return any(n.end_word for n in q)
