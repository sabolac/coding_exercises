#!/usr/bin/env python3

"""
Ref:

Isomorphic Strings

Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get
t.

All occurrences of a character must be replaced with another character while
preserving the order of characters. No two characters may map to the same
character, but a character may map to itself.


Example 1:

Input: s = "egg", t = "add"
Output: true


Example 2:

Input: s = "foo", t = "bar"
Output: false


Example 3:

Input: s = "paper", t = "title"
Output: true


Constraints:

1 <= s.length <= 5 * 10^4
t.length == s.length
s and t consist of any valid ascii character.
"""


class Solution:
    # simple solution
    def isIsomorphic1(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False

        s_2_t = {}
        already_mapped_to = set()
        for i, j in zip(s, t):
            if i in s_2_t:
                if s_2_t[i] != j:
                    return False
            else:
                # make sure no other char already maps to j
                if j in already_mapped_to:
                    return False
                s_2_t[i] = j
                already_mapped_to.add(j)

        return True

    # more clever/concise solution
    def isIsomorphic(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False

        m1 = {}
        m2 = {}
        for k, (i, j) in enumerate(zip(s, t)):
            if m1.get(i, k) != m2.get(j, k):
                return False
            m1[i] = m2[j] = k

        return True


def main():
    assert Solution().isIsomorphic("egg", "add")
    assert Solution().isIsomorphic("paper", "title")
    assert not Solution().isIsomorphic("foo", "bar")
    assert not Solution().isIsomorphic("badc", "baba")


main()
