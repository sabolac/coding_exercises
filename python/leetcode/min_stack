#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/min-stack

Min Stack

Design a stack that supports push, pop, top, and retrieving the minimum element
in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
You must implement a solution with O(1) time complexity for each function.


Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2


Constraints:

-2^31 <= val <= 2^31 - 1
Methods pop, top and getMin operations will always be called on non-empty
stacks.
At most 3 * 10^4 calls will be made to push, pop, top, and getMin.
"""


class MinStack:
    """The approach is to keep every item in the stack with the min value at the
    time of adding that value"""

    def __init__(self):
        self._ms = []

    def push(self, val: int) -> None:
        last_min = self._ms[-1][1] if self._ms else val
        self._ms.append([val, min(val, last_min)])

    def pop(self) -> None:
        if self._ms:
            self._ms.pop()

    def top(self) -> int:
        if self._ms:
            return self._ms[-1][0]

    def getMin(self) -> int:
        if self._ms:
            return self._ms[-1][1]


class MinStack2:

    def __init__(self):
        self.stack = []
        self.minVal = float('inf')

    def push(self, val: int) -> None:
        if val <= self.minVal:
            self.stack.append(self.minVal)  # push the previous min value
            self.minVal = val               # update the min value
        self.stack.append(val)              # push the new val

    def pop(self) -> None:
        if self.stack.pop() == self.minVal:  # when we pop the min val,
            # we pop the next (previous min value) of it as well and update the
            # min value
            self.minVal = self.stack.pop()

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.minVal
