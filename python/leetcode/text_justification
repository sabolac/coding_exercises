#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/text-justification

Given an array of strings 'words' and a width maxWidth, format the text such
that each line has exactly maxWidth characters and is fully (left and right)
justified.

You should pack your words in a greedy approach; that is, pack as many words as
you can in each line. Pad extra spaces ' ' when necessary so that each line has
exactly maxWidth characters.

Extra spaces between words should be distributed as evenly as possible. If the
number of spaces on a line does not divide evenly between words, the empty slots
on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left-justified, and no extra space is
inserted between words.

Note:

A word is defined as a character sequence consisting of non-space characters
only. Each word's length is guaranteed to be greater than 0 and not exceed
maxWidth. The input array words contains at least one word.


Example 1:

Input: words = ["This", "is", "an", "example", "of", "text", "justification."],
maxWidth = 16
Output:
[
   "This    is    an",
   "example  of text",
   "justification.  "
]


Example 2:

Input: words = ["What","must","be","acknowledgment","shall","be"], maxWidth = 16
Output:
[
  "What   must   be",
  "acknowledgment  ",
  "shall be        "
]
Explanation: Note that the last line is "shall be    " instead of "shall
be", because the last line must be left-justified instead of fully-justified.
Note that the second line is also left-justified because it contains only one
word.


Example 3:

Input: words =
["Science","is","what","we","understand","well","enough","to","explain","to",
"a","computer.","Art","is","everything","else","we","do"],
maxWidth = 20
Output:
[
  "Science  is  what we",
  "understand      well",
  "enough to explain to",
  "a  computer.  Art is",
  "everything  else  we",
  "do                  "
]


Constraints:

1 <= words.length <= 300
1 <= words[i].length <= 20
words[i] consists of only English letters and symbols.
1 <= maxWidth <= 100
words[i].length <= maxWidth
"""


from typing import List
from math import ceil


class Solution:
    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:
        N = len(words)
        lines = []
        i = 0
        while i < N:
            start = i
            next_word = words[i]
            line_width = len(next_word)
            i += 1
            if i == N:
                lines.append(self.make_justified_line(
                    words, start, i, maxWidth))
                break
            next_word = words[i]
            while line_width + 1 + len(next_word) <= maxWidth:
                line_width += 1 + len(next_word)
                i += 1
                if i == N:
                    break
                next_word = words[i]
            lines.append(self.make_justified_line(words, start, i, maxWidth))

        return lines

    def make_justified_line(self, words: List[str], start: int, end: int, maxWidth: int) -> str:
        word_count = end - start

        # left justify single word lines
        if word_count == 1:
            w = words[start]
            return w + ' '*(maxWidth - len(w))

        # left justify last line with only one space between each word (no extra
        # space)
        if end >= len(words):
            line = ' '.join([words[i] for i in range(start, end)])
            return line + ' '*(maxWidth-len(line))

        line = words[start]
        words_left = end - start - 1
        space_left = maxWidth - sum([len(words[i]) for i in range(start, end)])
        for i in range(start+1, end):
            spaces = ceil(space_left/words_left)
            space_left -= spaces
            words_left -= 1
            line += ' '*spaces + words[i]

        return line


def main():
    words = ["This", "is", "an", "example", "of", "text", "justification."]
    output = [
        "This    is    an",
        "example  of text",
        "justification.  "
    ]
    assert Solution().fullJustify(words, 16) == output

    words = ["What", "must", "be", "acknowledgment", "shall", "be"]
    output = [
        "What   must   be",
        "acknowledgment  ",
        "shall be        "
    ]
    assert Solution().fullJustify(words, 16) == output

    words = [
        "Science", "is", "what", "we", "understand", "well", "enough", "to",
        "explain", "to", "a", "computer.", "Art", "is", "everything", "else",
        "we", "do"]

    output = [
        "Science  is  what we",
        "understand      well",
        "enough to explain to",
        "a  computer.  Art is",
        "everything  else  we",
        "do                  "
    ]
    assert Solution().fullJustify(words, 20) == output


main()
