#!/usr/bin/env python3

"""
Ref: https://leetcode.com/problems/word-search-ii


Word Search II

Given an m x n board of characters and a list of strings words, return all words
on the board.

Each word must be constructed from letters of sequentially adjacent cells, where
adjacent cells are horizontally or vertically neighboring. The same letter cell
may not be used more than once in a word.


Example 1:

Input: board = [
    ["o","a","a","n"],
    ["e","t","a","e"],
    ["i","h","k","r"],
    ["i","f","l","v"]
]

words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]


Example 2:

Input: board = [
    ["a","b"],
    ["c","d"]
]

words = ["abcb"]
Output: []


Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 12
board[i][j] is a lowercase English letter.
1 <= words.length <= 3 * 10^4
1 <= words[i].length <= 10
words[i] consists of lowercase English letters.
All the strings of words are unique.
"""


class Solution1:
    def find_words(self, board: list[list[str]], words: list[str]) -> list[str]:
        result = []
        m = len(board)
        n = len(board[0])

        def dfs(w: str, k: int, i: int, j: int, visited: list[list[bool]]) -> bool:
            if k == len(w):
                return True
            if i < 0 or i >= m or j < 0 or j >= n:
                return False
            if not visited[i][j] and board[i][j] == w[k]:
                visited[i][j] = True
                k += 1
                for p, q in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                    if dfs(w, k, i+p, j+q, visited):
                        return True
                visited[i][j] = False

            return False

        for w in words:
            found = False
            for i in range(m):
                if found:
                    break
                for j in range(n):
                    if board[i][j] == w[0]:
                        visited = [[False]*n for _ in range(m)]
                        if dfs(w, 0, i, j, visited):
                            result.append(w)
                            found = True
                            break

        return result


# This is a solution from LeetCode
class SolutionTrie:
    def find_words(self, board: list[list[str]], words: list[str]) -> list[str]:
        # Build the trie
        trie = {}
        for word in words:
            curr_subtrie = trie
            for i, c in enumerate(word):
                stored_word, next_subtrie = curr_subtrie.get(c, (None, {}))
                # Store the word in the final character's node
                curr_subtrie[c] = (word if i == len(
                    word) - 1 else stored_word, next_subtrie)
                curr_subtrie = next_subtrie

        result = []
        m, n = len(board), len(board[0])

        def explore(i, j, curr_subtrie=trie):
            c = board[i][j]
            if c in curr_subtrie:
                # Move to the next node in the trie
                stored_word, next_subtrie = curr_subtrie[c]

                # Base case:
                # A word has been found
                if stored_word:
                    # Add the word to the return list
                    result.append(stored_word)
                    # Remove the word from the trie to avoid finding duplicates
                    curr_subtrie[c] = None, next_subtrie
                    # Delete the subtree if it is empty (pruning)
                    if not next_subtrie:
                        curr_subtrie.pop(c)

                # Recursive step:
                # Mark the board spot as visited
                board[i][j] = "."
                if next_subtrie:
                    # Recursively explore in 4 directions
                    if i > 0:
                        explore(i-1, j, next_subtrie)
                    if i < m-1:
                        explore(i+1, j, next_subtrie)
                    if j > 0:
                        explore(i, j-1, next_subtrie)
                    if j < n-1:
                        explore(i, j+1, next_subtrie)

                    # Delete the subtree if it is empty (pruning)
                    if not next_subtrie:
                        curr_subtrie.pop(c)

                # Unmark the board spot
                board[i][j] = c

        # Run explore on every grid space
        for i in range(m):
            for j in range(n):
                # As the trie gets smaller less exploration will be done
                explore(i, j)

        return result


def main():
    board = [
        ["o", "a", "a", "n"],
        ["e", "t", "a", "e"],
        ["i", "h", "k", "r"],
        ["i", "f", "l", "v"]
    ]
    words = ["oath", "pea", "eat", "rain"]
    output = ["oath", "eat"]
    assert SolutionTrie().find_words(board, words) == output

    board = [
        ["a", "b"],
        ["c", "d"]
    ]
    words = ["abcb"]
    output = []
    assert SolutionTrie().find_words(board, words) == output

    board = [["a", "a"]]
    words = ["aaa"]
    output = []
    assert SolutionTrie().find_words(board, words) == output

    board = [
        ["o", "a", "a", "n"],
        ["e", "t", "a", "e"],
        ["i", "h", "k", "p"],
        ["i", "f", "l", "v"]
    ]
    words = ["oath", "pea", "eat", "rain"]
    output = ["oath", "eat", "pea"]
    assert SolutionTrie().find_words(board, words) == output


main()
