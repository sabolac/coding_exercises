#!/usr/bin/env python3

"""
Ref: https://leetcode.com/problems/jump-game-ii

You are given a 0-indexed array of integers nums of length n. You are initially
positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index
i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i]

and

i + j < n

Return the minimum number of jumps to reach nums[n - 1]. The test cases are
generated such that you can reach nums[n - 1].


Example 1:

Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1
step from index 0 to 1, then 3 steps to the last index.


Example 2:

Input: nums = [2,3,0,1,4]
Output: 2


Constraints:

1 <= nums.length <= 10^4
0 <= nums[i] <= 1000
It's guaranteed that you can reach nums[n - 1].
"""


from typing import List


class Solution:
    def jump(self, nums: List[int]) -> int:
        jump_count = 0
        max_reachable_index = 0
        max_jump = 0

        for i, v in enumerate(nums):
            if max_reachable_index >= len(nums)-1:
                return jump_count

            max_jump = max(i + v, max_jump)
            if i == max_reachable_index:
                # we could not get further than max_reachable_index
                # the end is not reachable
                if max_jump <= max_reachable_index:
                    return -1
                max_reachable_index = max_jump
                max_jump = 0
                jump_count += 1

        return jump_count


def main():
    assert Solution().jump([0]) == 0
    assert Solution().jump([2, 3, 1, 1, 4]) == 2
    assert Solution().jump([2, 3, 0, 1, 4]) == 2
    assert Solution().jump([1]*5) == 4

    # create an unreachable list, e.g. for x = 5, l = [5, 5, 4, 3, 2, 1, 0, 0]
    x = 100000
    l = list(range(x, -1, -1))
    assert Solution().jump(l) == 1
    l.append(1)
    assert Solution().jump(l) == -1
    l[-2] = 1
    assert Solution().jump(l) == 2


main()
