#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/rotate-array

Given an integer array nums, rotate the array to the right by k steps, where k
is non-negative.



Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]


Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation:
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]


Constraints:

1 <= nums.length <= 10^5
-2^31 <= nums[i] <= 2^31 - 1
0 <= k <= 10^5


Follow up:

Try to come up with as many solutions as you can. There are at least three
different ways to solve this problem.

Could you do it in-place with O(1) extra space?
"""


from typing import List


class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        Solution:
        Starting at index 0 we swap every other k item in a loop, i.e. nums[0]
        with nums[k], nums[k] with nums[2k] nums[2k] with nums[3k] and so on.
        When we end up at the same start index (and we will always end up at the
        start index no matter what by 'i = (i+k) % length', otherwise we would
        end up in an infinite loop without ever hitting the start index again
        which is not possible as we move k items at each step evenly) if we
        swapped all numbers (total_items_moved == length) we are done. If not we
        move to the next item and do the swap loop again. When we swapped all
        numbers to their +k position (total_items_moved == length) we are done.
        """
        # nothing to rotate when array is empty or has 1 item
        length = len(nums)
        if length <= 1:
            return

        total_items_moved = 0
        start = 0
        # it only makes sense to rotate less than the length of the array
        # rotating n*length times will keep the elements at their original place
        # so has no effect
        k = k % length

        while total_items_moved < length:
            i = start
            while True:
                # when i becomes (i+n*k)%length where nk is divisible by length
                # (at the very least for n = length) i will be equal to start
                # again so i is guaranteed to return to the start value again at
                # some point
                i = (i + k) % length
                total_items_moved += 1
                if i == start:
                    break

                # using nums[start] as temp and also the last swap will end up
                # at start as expected
                nums[start], nums[i] = nums[i], nums[start]
            start += 1


def main():
    for length in range(300):
        nums = list(range(length))
        for k in range(2*length):
            x = k % length if length > 0 else k
            expected = nums[-x:] + nums[:-x]
            Solution().rotate(nums, k)
            assert nums == expected


main()
