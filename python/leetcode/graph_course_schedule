#!/usr/bin/env python3

"""
Ref: https://leetcode.com/problems/course-schedule

Course Schedule

There are a total of numCourses courses you have to take, labeled from 0 to
numCourses - 1. You are given an array prerequisites where prerequisites[i] =
[ai, bi] indicates that you must take course bi first if you want to take course
ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first
take course 1.

Return true if you can finish all courses. Otherwise, return
false.


Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take.
To take course 1 you should have finished course 0. So it is possible.


Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take.
To take course 1 you should have finished course 0, and to take course 0 you
should also have finished course 1. So it is impossible.


Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
All the pairs prerequisites[i] are unique.
"""


"""
Ref: https://leetcode.com/problems/course-schedule-ii

Course Schedule II

There are a total of numCourses courses you have to take, labeled from 0 to
numCourses - 1. You are given an array prerequisites where prerequisites[i] =
[ai, bi] indicates that you must take course bi first if you want to take course
ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first
take course 1.

Return the ordering of courses you should take to finish all courses. If there
are many valid answers, return any of them. If it is impossible to finish all
courses, return an empty array.



Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should
have finished course 0. So the correct course order is [0,1].


Example 2:

Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should
have finished both courses 1 and 2. Both courses 1 and 2 should be taken after
you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].


Example 3:

Input: numCourses = 1, prerequisites = []
Output: [0]


Constraints:

1 <= numCourses <= 2000
0 <= prerequisites.length <= numCourses * (numCourses - 1)
prerequisites[i].length == 2
0 <= ai, bi < numCourses
ai != bi
All the pairs [ai, bi] are distinct.
"""




from collections import deque
class Solution:
    def canFinish_slow(self, numCourses: int, prerequisites: list[list[int]]) -> bool:
        course_2_pre = {i: set() for i in range(numCourses)}

        for (course, pre_req) in prerequisites:
            course_2_pre[course].add(pre_req)

        # available courses are those without any remaining pre-requisites
        while True:
            available_courses = [
                c for c, pre_reqs in course_2_pre.items() if not pre_reqs]
            if not available_courses:
                break

            for c in available_courses:
                del course_2_pre[c]

            for pre_req in course_2_pre.values():
                pre_req.difference_update(available_courses)

        return len(course_2_pre) == 0

    def canFinish(self, n: int, prerequisites: list[list[int]]) -> bool:
        adj = [[] for _ in range(n)]
        in_degree = [0] * n
        result = []

        for course, pre_req in prerequisites:
            adj[pre_req].append(course)
            in_degree[course] += 1

        q = deque([i for i in range(n) if in_degree[i] == 0])

        while q:
            course = q.popleft()
            result.append(course)

            for c in adj[course]:
                in_degree[c] -= 1
                if in_degree[c] == 0:
                    q.append(c)

        return len(result) == n

    def findOrder(self, n: int, prerequisites: list[list[int]]) -> list[int]:
        adj = [[] for _ in range(n)]
        in_degree = [0] * n
        result = []

        for course, pre_req in prerequisites:
            adj[pre_req].append(course)
            in_degree[course] += 1

        q = deque([i for i in range(n) if in_degree[i] == 0])

        while q:
            course = q.popleft()
            result.append(course)

            for c in adj[course]:
                in_degree[c] -= 1
                if in_degree[c] == 0:
                    q.append(c)

        return result if len(result) == n else []


def main():
    numCourses = 2
    prerequisites = [[1, 0]]
    assert Solution().canFinish(numCourses, prerequisites)

    numCourses = 2
    prerequisites = [[1, 0], [0, 1]]
    assert not Solution().canFinish(numCourses, prerequisites)

    numCourses = 3
    prerequisites = [[1, 0], [1, 2], [0, 1]]
    assert not Solution().canFinish(numCourses, prerequisites)

    numCourses = 20
    prerequisites = [[0, 10], [3, 18], [5, 5], [
        6, 11], [11, 14], [13, 1], [15, 1], [17, 4]]
    assert not Solution().canFinish(numCourses, prerequisites)

    numCourses = 2
    prerequisites = [[1, 0]]
    output = [0, 1]
    assert Solution().findOrder(numCourses, prerequisites) == output

    numCourses = 4
    prerequisites = [[1, 0], [2, 0], [3, 1], [3, 2]]
    output = [0, 1, 2, 3]
    assert Solution().findOrder(numCourses, prerequisites) == output

    numCourses = 1
    prerequisites = []
    output = [0]
    assert Solution().findOrder(numCourses, prerequisites) == output


main()
