#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/invert-binary-tree

Invert Binary Tree

Given the root of a binary tree, invert the tree, and return its root.

Example 1:

Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]


Example 2:

Input: root = [2,1,3]
Output: [2,3,1]


Example 3:

Input: root = []
Output: []


Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
"""


from typing import Self
from collections import deque


# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val: int = 0, left: Self = None, right: Self = None):
        self.val = val
        self.left = left
        self.right = right

    @staticmethod
    def from_list(l: list[int]) -> Self | None:
        if not l:
            return None

        root = TreeNode(l[0])
        q = deque()
        q.append(root)

        i = 0
        while i < len(l)-2:
            n = q.popleft()

            i += 1
            if l[i] is not None:
                n.left = TreeNode(l[i])
                q.append(n.left)

            i += 1
            if l[i] is not None:
                n.right = TreeNode(l[i])
                q.append(n.right)

        return root

    @staticmethod
    def to_list(root: Self | None) -> list[int]:
        if not root:
            return []

        l = []
        q = deque()
        q.append(root)

        while q:
            n = q.popleft()
            if n:
                l.append(n.val)
                # do not append children if they are both None
                if n.left or n.right:
                    q.append(n.left)
                    q.append(n.right)
            else:
                l.append(None)
        return l


class Solution:
    def invertTree_recursive(self, root: TreeNode | None) -> TreeNode | None:
        if not root:
            return root

        root.left, root.right = root.right, root.left
        self.invertTree(root.left)
        self.invertTree(root.right)
        return root

    def invertTree(self, root: TreeNode | None) -> TreeNode | None:
        q = deque()
        q.append(root)

        while q:
            n = q.popleft()
            if n:
                n.left, n.right = n.right, n.left
                q.append(n.left)
                q.append(n.right)
        return root


def main():
    root = TreeNode.from_list([4, 2, 7, 1, 3, 6, 9])
    output = [4, 7, 2, 9, 6, 3, 1]
    assert TreeNode.to_list(Solution().invertTree(root)) == output

    root = TreeNode.from_list([2, 1, 3])
    output = [2, 3, 1]
    assert TreeNode.to_list(Solution().invertTree(root)) == output

    root = TreeNode.from_list([])
    output = []
    assert TreeNode.to_list(Solution().invertTree(root)) == output


main()
