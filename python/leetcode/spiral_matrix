#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/spiral-matrix

Spiral Matrix

Given an m x n matrix, return all elements of the matrix in spiral order.


Example 1:


Input: matrix = [
    [1,2,3],
    [4,5,6],
    [7,8,9]]

Output: [1,2,3,6,9,8,7,4,5]


Example 2:


Input: matrix = [
    [1,  2,  3,  4],
    [5,  6,  7,  8],
    [9, 10, 11, 12]]

Output: [1,2,3,4,8,12,11,10,9,5,6,7]


Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100
"""


from typing import List


class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        result = []

        len_row = len(matrix)
        len_col = len(matrix[0])
        if len_row == 0 or len_col == 0:
            return result

        row_start = col_start = 0
        row_end = len_row
        col_end = len_col

        # note that at each step (right, down, left, up) we carry the last value
        # of i, j to the next step (see spiralOrder2 below for the version that
        # does not do that)
        i = j = 0
        while True:
            # go right
            for j in range(col_start, col_end):
                result.append(matrix[i][j])
            row_start += 1
            if row_start == row_end:
                break

            # go down
            for i in range(row_start, row_end):
                result.append(matrix[i][j])
            col_end -= 1
            if col_start == col_end:
                break

            # go left
            for j in range(col_end-1, col_start-1, -1):
                result.append(matrix[i][j])
            row_end -= 1
            if row_start == row_end:
                break

            # go up
            for i in range(row_end-1, row_start-1, -1):
                result.append(matrix[i][j])
            col_start += 1
            if col_start == col_end:
                break

        return result

    def spiralOrder2(self, matrix: List[List[int]]) -> List[int]:
        result = []

        len_row = len(matrix)
        len_col = len(matrix[0])
        if len_row == 0 or len_col == 0:
            return result

        row_start = col_start = 0
        row_end = len_row
        col_end = len_col

        while True:
            # go right
            result.extend([matrix[row_start][j]
                          for j in range(col_start, col_end)])
            row_start += 1
            if row_start == row_end:
                break

            # go down
            col_end -= 1
            result.extend([matrix[i][col_end]
                          for i in range(row_start, row_end)])
            if col_start == col_end:
                break

            # go left
            row_end -= 1
            result.extend([matrix[row_end][j]
                          for j in range(col_end-1, col_start-1, -1)])
            if row_start == row_end:
                break

            # go up
            result.extend([matrix[i][col_start]
                          for i in range(row_end-1, row_start-1, -1)])
            col_start += 1
            if col_start == col_end:
                break

        return result


def main():
    matrix = [
        [],
    ]
    output = []
    assert Solution().spiralOrder(matrix) == output

    matrix = [
        [],
        [],
    ]
    output = []
    assert Solution().spiralOrder(matrix) == output

    matrix = [
        [1],
    ]
    output = [1]
    assert Solution().spiralOrder(matrix) == output

    matrix = [
        [1],
        [2],
    ]
    output = [1, 2]
    assert Solution().spiralOrder(matrix) == output

    matrix = [
        [1, 2],
    ]
    output = [1, 2]
    assert Solution().spiralOrder(matrix) == output

    matrix = [
        [1, 2],
        [4, 5],
    ]
    output = [1, 2, 5, 4]
    assert Solution().spiralOrder(matrix) == output

    matrix = [
        [1, 2, 3],
    ]
    output = [1, 2, 3]
    assert Solution().spiralOrder(matrix) == output

    matrix = [
        [1, 2, 3],
        [4, 5, 6],
    ]
    output = [1, 2, 3, 6, 5, 4]
    assert Solution().spiralOrder(matrix) == output

    matrix = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9],
    ]
    output = [1, 2, 3, 6, 9, 8, 7, 4, 5]
    assert Solution().spiralOrder(matrix) == output

    matrix = [
        [1,  2,  3,  4],
        [5,  6,  7,  8],
        [9, 10, 11, 12],
    ]

    output = [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]
    assert Solution().spiralOrder(matrix) == output

    matrix = [
        [1,  2,  3,  4,  5],
        [6,  7,  8,  9, 10],
        [11, 12, 13, 14, 15],
        [16, 17, 18, 19, 20],
        [21, 22, 23, 24, 25]
    ]

    output = [1, 2, 3, 4, 5, 10, 15, 20, 25, 24, 23, 22,
              21, 16, 11, 6, 7, 8, 9, 14, 19, 18, 17, 12, 13]
    assert Solution().spiralOrder(matrix) == output


main()
