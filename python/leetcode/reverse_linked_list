#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/reverse-linked-list-ii

Reverse Linked List II

Given the head of a singly linked list and two integers left and right where
left <= right, reverse the nodes of the list from position left to position
right, and return the reversed list.


Example 1:

Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]


Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]


Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n

Follow up: Could you do it in one pass?
"""


# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next


class Solution:
    def reverseBetween(self, head: ListNode | None, left: int, right: int) -> ListNode | None:
        if left == right or not head or not head.next:
            return head

        c = head  # current node

        i = 2
        while i < left:
            c = c.next
            i += 1

        p = c  # previous node
        c = c.next
        n = c.next  # next node

        l = p  # previous node of where we started the reversing
        while i < right:
            c.next = p
            p = c
            c = n
            n = n.next
            i += 1

        c.next = p

        if left == 1:
            l.next = n
            return c

        if l:
            l.next.next = n
            l.next = c
            return head
        else:
            return c


def to_list(n):
    l = []
    while n:
        l.append(n.val)
        n = n.next

    return l


def from_list(l: list[int]) -> ListNode | None:
    head = ListNode()
    n = head
    for i in l:
        n.next = ListNode(i)
        n = n.next
    head = head.next
    return head


def main():
    head = from_list([1, 2, 3, 4, 5])
    output = [1, 2, 3, 4, 5]
    assert to_list(Solution().reverseBetween(head, 1, 1)) == output

    head = from_list([1, 2, 3, 4, 5])
    output = [2, 1, 3, 4, 5]
    assert to_list(Solution().reverseBetween(head, 1, 2)) == output

    head = from_list([1, 2, 3, 4, 5])
    output = [3, 2, 1, 4, 5]
    assert to_list(Solution().reverseBetween(head, 1, 3)) == output

    head = from_list([1, 2, 3, 4, 5])
    output = [4, 3, 2, 1, 5]
    assert to_list(Solution().reverseBetween(head, 1, 4)) == output

    head = from_list([1, 2, 3, 4, 5])
    output = [5, 4, 3, 2, 1]
    assert to_list(Solution().reverseBetween(head, 1, 5)) == output

    head = from_list([1, 2, 3, 4, 5])
    output = [1, 2, 3, 4, 5]
    assert to_list(Solution().reverseBetween(head, 2, 2)) == output

    head = from_list([1, 2, 3, 4, 5])
    output = [1, 3, 2, 4, 5]
    assert to_list(Solution().reverseBetween(head, 2, 3)) == output

    head = from_list([1, 2, 3, 4, 5])
    output = [1, 4, 3, 2, 5]
    assert to_list(Solution().reverseBetween(head, 2, 4)) == output

    head = from_list([1, 2, 3, 4, 5])
    output = [1, 5, 4, 3, 2]
    assert to_list(Solution().reverseBetween(head, 2, 5)) == output

    head = from_list([1, 2, 3, 4, 5])
    output = [1, 2, 4, 3, 5]
    assert to_list(Solution().reverseBetween(head, 3, 4)) == output

    head = from_list([1, 2, 3, 4, 5])
    output = [1, 2, 5, 4, 3]
    assert to_list(Solution().reverseBetween(head, 3, 5)) == output

    head = from_list([1, 2, 3, 4, 5])
    output = [1, 2, 3, 5, 4]
    assert to_list(Solution().reverseBetween(head, 4, 5)) == output

    head = from_list([1, 2, 3])
    output = [3, 2, 1]
    assert to_list(Solution().reverseBetween(head, 1, 3)) == output

    head = from_list([1, 2, 3])
    output = [2, 1, 3]
    assert to_list(Solution().reverseBetween(head, 1, 2)) == output

    head = from_list([1, 2, 3])
    output = [1, 3, 2]
    assert to_list(Solution().reverseBetween(head, 2, 3)) == output

    head = from_list([1, 2])
    output = [2, 1]
    assert to_list(Solution().reverseBetween(head, 1, 2)) == output


main()
