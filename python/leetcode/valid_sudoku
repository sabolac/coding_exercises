#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/valid-sudoku

Valid Sudoku

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be
validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without
repetition.


Note:

A Sudoku board (partially filled) could be valid but is not necessarily
solvable. Only the filled cells need to be validated according to the mentioned
rules.


Example 1:


Input: board = [
    ['5','3','.','.','7','.','.','.','.'],
    ['6','.','.','1','9','5','.','.','.'],
    ['.','9','8','.','.','.','.','6','.'],
    ['8','.','.','.','6','.','.','.','3'],
    ['4','.','.','8','.','3','.','.','1'],
    ['7','.','.','.','2','.','.','.','6'],
    ['.','6','.','.','.','.','2','8','.'],
    ['.','.','.','4','1','9','.','.','5'],
    ['.','.','.','.','8','.','.','7','9'],
]
Output: true


Example 2:

Input: board = [
    ['8','3','.','.','7','.','.','.','.'],
    ['6','.','.','1','9','5','.','.','.'],
    ['.','9','8','.','.','.','.','6','.'],
    ['8','.','.','.','6','.','.','.','3'],
    ['4','.','.','8','.','3','.','.','1'],
    ['7','.','.','.','2','.','.','.','6'],
    ['.','6','.','.','.','.','2','8','.'],
    ['.','.','.','4','1','9','.','.','5'],
    ['.','.','.','.','8','.','.','7','9'],
]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being
modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is
invalid.


Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'

"""


from typing import List
from string import digits


class Solution:
    def isValidSudoku2(self, board: List[List[str]]) -> bool:
        # check every row
        for i in range(9):
            s = "".join([board[i][j] if board[i][j]
                        in digits else "" for j in range(9)])
            if len(set(s)) < len(s):
                return False

        # check every column
        for j in range(9):
            s = "".join([board[i][j] if board[i][j]
                        in digits else "" for i in range(9)])
            if len(set(s)) < len(s):
                return False

        # check every 3x3 box
        for b in range(9):
            d, m = divmod(b, 3)
            r = 3*d
            c = 3*m

            s = "".join([board[i][j] if board[i][j] in digits else ""
                         for i in range(r, r+3)
                         for j in range(c, c+3)])
            if len(set(s)) < len(s):
                return False

        return True

    def isValidSudoku(self, board: List[List[str]]) -> bool:
        items = []
        for i, row in enumerate(board):
            for j, x in enumerate(row):
                if x != '.':
                    # (i, x) : row, element
                    # (x, j) : element, column
                    # (i, x) : row, element
                    # note that x is string and i,j is int so rows and columns
                    # don't collide
                    items += [(i, x), (x, j), (i // 3, j // 3, x)]

        # see if there is any duplicate item
        return len(items) == len(set(items))


def main():
    board = [
        ['5', '3', '.', '.', '7', '.', '.', '.', '.'],
        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
    ]
    assert Solution().isValidSudoku(board)

    board = [
        ['8', '3', '.', '.', '7', '.', '.', '.', '.'],
        ['6', '.', '.', '1', '9', '5', '.', '.', '.'],
        ['.', '9', '8', '.', '.', '.', '.', '6', '.'],
        ['8', '.', '.', '.', '6', '.', '.', '.', '3'],
        ['4', '.', '.', '8', '.', '3', '.', '.', '1'],
        ['7', '.', '.', '.', '2', '.', '.', '.', '6'],
        ['.', '6', '.', '.', '.', '.', '2', '8', '.'],
        ['.', '.', '.', '4', '1', '9', '.', '.', '5'],
        ['.', '.', '.', '.', '8', '.', '.', '7', '9'],
    ]
    assert not Solution().isValidSudoku(board)


main()
