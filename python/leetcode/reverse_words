#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/reverse-words-in-a-string

Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be
separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between
two words. The returned string should only have a single space separating the
words. Do not include any extra spaces.



Example 1:

Input: s = "the sky is blue"
Output: "blue is sky the"


Example 2:

Input: s = "  hello world  "
Output: "world hello"
Explanation: Your reversed string should not contain leading or trailing spaces.


Example 3:

Input: s = "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single
space in the reversed string.


Constraints:

1 <= s.length <= 10^4
s contains English letters (upper-case and lower-case), digits, and spaces ' '.
There is at least one word in s.


Follow-up: If the string data type is mutable in your language, can you solve it
in-place with O(1) extra space?
"""


from array import array
import string


class Solution:
    def reserve_words_simple(self, s: str) -> str:
        words = s.split()
        words.reverse()
        return " ".join(words)

    def reserve_words(self, s: str) -> str:
        """in place version if str was mutable (copy to array to mimic)"""
        N = len(s)
        a = array('u', s)

        # reverse each word in place
        start = 0
        end = -1
        while start < N:
            start = end + 1
            while start < N and a[start] in string.whitespace:
                start += 1

            end = start
            while end < N and a[end] not in string.whitespace:
                end += 1

            self.reserve_word(a, start, end)

        # reverse the whole string in place
        self.reserve_word(a, 0, N)

        # skip repeated whitespace characters
        i = current = 0
        while current < N:
            a[i] = a[current]
            i += 1
            current += 1

            if a[current-1] in string.whitespace:
                while current < N and a[current] in string.whitespace:
                    current += 1

        # skip leading and trailing whitespace, we have at most one at each end
        if i > 0 and a[i-1] in string.whitespace:
            i -= 1

        j = 0
        if j < N and a[j] in string.whitespace:
            j += 1

        return a[j:i].tounicode()

    def reserve_word(self, a: array, start: int, end: int) -> None:
        end -= 1
        while start < end:
            a[start], a[end] = a[end], a[start]
            start += 1
            end -= 1


def main():
    assert Solution().reserve_words("") == ""
    assert Solution().reserve_words(" ") == ""
    assert Solution().reserve_words("   ") == ""
    assert Solution().reserve_words("h") == "h"
    assert Solution().reserve_words(" h") == "h"
    assert Solution().reserve_words("h ") == "h"
    assert Solution().reserve_words(" h ") == "h"
    assert Solution().reserve_words("     h   ") == "h"
    assert Solution().reserve_words("hello") == "hello"
    assert Solution().reserve_words("  hello") == "hello"
    assert Solution().reserve_words("hello  ") == "hello"
    assert Solution().reserve_words("   hello  ") == "hello"
    assert Solution().reserve_words("hello world") == "world hello"
    assert Solution().reserve_words("  hello world  ") == "world hello"
    assert Solution().reserve_words("the sky is blue") == "blue is sky the"
    assert Solution().reserve_words("a good   example") == "example good a"
    assert Solution().reserve_words("   foo  bar     baz    ") == "baz bar foo"


main()
