#!/usr/bin/env python3


"""
Ref: https://leetcode.com/problems/binary-search-tree-iterator

Binary Search Tree Iterator

Implement the BSTIterator class that represents an iterator over the in-order
traversal of a binary search tree (BST):

BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The
root of the BST is given as part of the constructor. The pointer should be
initialized to a non-existent number smaller than any element in the BST.

boolean hasNext() Returns true if there exists a number in the traversal to the
right of the pointer, otherwise returns false.

int next() Moves the pointer to the right, then returns the number at the
pointer.

Notice that by initializing the pointer to a non-existent smallest number, the
first call to next() will return the smallest element in the BST.

You may assume that next() calls will always be valid. That is, there will be at
least a next number in the in-order traversal when next() is called.


Example 1:
BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);
bSTIterator.next();    // return 3
bSTIterator.next();    // return 7
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 9
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 15
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 20
bSTIterator.hasNext(); // return False


Constraints:

The number of nodes in the tree is in the range [1, 10^5].
0 <= Node.val <= 10^6
At most 10^5 calls will be made to hasNext, and next.


Follow up:

Could you implement next() and hasNext() to run in average O(1) time and use
O(h) memory, where h is the height of the tree?
"""


from typing import Self
from collections import deque


# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val: int = 0, left: Self = None, right: Self = None, next: Self = None):
        self.val = val
        self.left = left
        self.right = right

    @staticmethod
    def from_list(l: list[int]) -> Self | None:
        if not l:
            return None

        root = TreeNode(l[0])
        q = deque()
        q.append(root)

        i = 0
        while i < len(l)-2:
            n = q.popleft()

            i += 1
            if l[i] is not None:
                n.left = TreeNode(l[i])
                q.append(n.left)

            i += 1
            if l[i] is not None:
                n.right = TreeNode(l[i])
                q.append(n.right)

        return root

    @staticmethod
    def to_list(root: Self | None) -> list[int]:
        if not root:
            return []

        l = []
        q = deque()
        q.append(root)

        while q:
            n = q.popleft()
            if n:
                l.append(n.val)
                q.append(n.left)
                q.append(n.right)
            else:
                l.append(None)

        # clean up the empty (None) nodes at the tail of last level
        i = len(l)-1
        while i >= 0 and l[i] is None:
            i -= 1

        return l[:i+1] if i >= 0 else []


class BSTIterator(object):

    def __init__(self, root):
        self.stack = []
        n = root
        while n:
            self.stack.append(n)
            n = n.left

    def next(self):
        node = self.stack.pop()
        n = node.right
        while n:
            self.stack.append(n)
            n = n.left
        return node.val

    def hasNext(self):
        return self.stack


class BSTIteratorMorris:
    """
    This one is using Morris Inorder traversal which is O(n) time and O(1) space
    """

    def __init__(self, root: TreeNode | None):
        self.curr = root

    def next(self) -> int:
        while self.curr:
            if not self.curr.left:
                val = self.curr.val
                self.curr = self.curr.right
                return val
            else:
                pred = self.curr.left
                while pred.right and pred.right != self.curr:
                    pred = pred.right
                if pred.right == self.curr:
                    pred.right = None
                    val = self.curr.val
                    self.curr = self.curr.right
                    return val
                else:
                    pred.right = self.curr
                    self.curr = self.curr.left

    def hasNext(self) -> bool:
        return self.curr is not None


def main():
    root = TreeNode.from_list([7, 3, 15, None, None, 9, 20])
    bst_iterator = BSTIteratorMorris(root)
    assert bst_iterator.next() == 3
    assert bst_iterator.next() == 7
    assert bst_iterator.hasNext()
    assert bst_iterator.next() == 9
    assert bst_iterator.hasNext()
    assert bst_iterator.next() == 15
    assert bst_iterator.hasNext()
    assert bst_iterator.next() == 20
    assert not bst_iterator.hasNext()
    assert not bst_iterator.hasNext()


main()
