#!/usr/bin/env python3

"""
Ref: https://leetcode.com/problems/longest-substring-without-repeating-characters/

Given a string s, find the length of the longest substring without repeating
characters.



Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a
substring.


Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
"""


class Solution:
    def lengthOfLongestSubstring(self, word: str) -> int:
        if not word:
            return 0

        substring_unique_letters = {word[0]: 0}
        current_start, start = 0, 0
        current_end, end = 1, 1

        while current_end < len(word):
            current_letter = word[current_end]
            # found a duplicate character in the current sequence
            if current_letter in substring_unique_letters:
                if (current_end-current_start) > (end - start):
                    end, start = current_end, current_start
                new_start = substring_unique_letters[current_letter]+1
                for i in range(current_start, new_start):
                    del substring_unique_letters[word[i]]
                current_start = new_start

            substring_unique_letters[current_letter] = current_end
            current_end += 1

        if (current_end-current_start) > (end - start):
            end, start = current_end, current_start

        # uncomment to debug
        # print(word[start:end], (end-start))
        return end-start


def main():
    assert Solution().lengthOfLongestSubstring("a") == 1
    assert Solution().lengthOfLongestSubstring("ab") == 2
    assert Solution().lengthOfLongestSubstring("abc") == 3
    assert Solution().lengthOfLongestSubstring("abcc") == 3
    assert Solution().lengthOfLongestSubstring("abca") == 3
    assert Solution().lengthOfLongestSubstring("abcabcbb") == 3
    assert Solution().lengthOfLongestSubstring("abcabcbbakla") == 4
    assert Solution().lengthOfLongestSubstring("bbbbb") == 1
    assert Solution().lengthOfLongestSubstring("pwwkew") == 3
    assert Solution().lengthOfLongestSubstring(
        "abcabcbbabbbccababccaqweratoiuywret") == 10


main()
